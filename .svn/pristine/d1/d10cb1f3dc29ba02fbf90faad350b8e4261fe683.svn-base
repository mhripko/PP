using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using PORTAL.Models;
using PORTAL.Custom;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using System.Data.SqlClient;
using System.Configuration;
using System.Data;

namespace PORTAL.Controllers
{
    public class POCREQUESTController : Controller
    {
        private PIPESPORTALEntities db = new PIPESPORTALEntities();

        // GET: POCREQUEST
        public ActionResult Index()
        {

            return View();
        }

        /// <summary>
        /// Index_Read is called by a Kendo UI Grid to read the rows.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ActionResult Index_Read([DataSourceRequest]DataSourceRequest request)
        {
            List<spGetAllPOCRequests_Result> pocr = db.spGetAllPOCRequests().ToList();
            DataSourceResult result = (pocr).ToDataSourceResult(request);
            return Json(result);
        }


        // GET: POCREQUEST/Details/5
        public ActionResult Details(int id)
        {
            return View();
        }

        // GET: POCREQUEST/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: POCREQUEST/Create
        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            if (ModelState.IsValid)
            {
                using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("sp_InsPOCRequest", con))
                    {
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;

                        cmd.Parameters.Add("@ProjectDescription", System.Data.SqlDbType.VarChar).Value = collection["PROJECTDESC"].ToString();
                        cmd.Parameters.Add("@ParcelNumber", System.Data.SqlDbType.VarChar).Value = collection["ParcelNumber"].ToString();
                        cmd.Parameters.Add("@ERU", System.Data.SqlDbType.Float).Value = Convert.ToDouble(collection["ERU"]);
                        cmd.Parameters.Add("@QAVG", System.Data.SqlDbType.Decimal).Value = Convert.ToDouble(collection["QAVG"]);
                        cmd.Parameters.Add("@REQUEST_BY", System.Data.SqlDbType.VarChar).Value = "bpuser@lvp.com";
                        cmd.Parameters.Add("@REQUEST_DT", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                        con.Open();
                        cmd.ExecuteNonQuery();

                        CreatePOCRequestEmail(collection);

                        return RedirectToAction("Index", "Home");
                    }
                }
            }
            ModelState.AddModelError("", "Error Try Again...");

            // If we got this far, something failed, redisplay form
            return View();
        }

        ////public ActionResult Dome()
        ////{
        ////    DataTable table1 = new DataTable();
        ////    DataTable table2 = new DataTable();

        ////    string connectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        ////    System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionString);
        ////    connection.Open();

        ////    System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand();
        ////    command.Connection = connection;
        ////    command.CommandText = "PIPESLINK.PIPES2D.dbo.sp_Portal_getProjLastPlanReviewSubmittalDetails";
        ////    command.CommandType = System.Data.CommandType.StoredProcedure;
        ////    command.Parameters.Add("@ProjID", System.Data.SqlDbType.BigInt).Value = 30297;

        ////    SqlDataAdapter adapter = new SqlDataAdapter(command);
        ////    DataSet dataSet = new DataSet();
        ////    adapter.Fill(dataSet);
        ////    if (dataSet.Tables.Count > 0)
        ////        table1 = dataSet.Tables[0];

        ////    //Results of table1 will show returned row (or rows).

        ////    sp_Portal_getProjLastPlanReviewSubmittalDetails_Result theAnswer = new sp_Portal_getProjLastPlanReviewSubmittalDetails_Result();
        ////    List<sp_Portal_getProjLastPlanReviewSubmittalDetails_Result> theList = new List<sp_Portal_getProjLastPlanReviewSubmittalDetails_Result>();

        ////    foreach(DataRow r in table1.Rows)
        ////    {
        ////        theAnswer.PROJECTID = Convert.ToInt32(r[0]);
        ////        theAnswer.PROJECTNUMBER = r[1].ToString();
        ////        theAnswer.PROJECTNAME = r[2].ToString();
        ////        theAnswer.PlanRevisionID = Convert.ToInt32(r[3]);
        ////        theAnswer.PlanSubmittalID = Convert.ToInt32(r[4]);
        ////        theAnswer.PlanRevisionNumber = Convert.ToInt32(r[5]);
        ////        theAnswer.ADDED_DT = Convert.ToDateTime(r[6]);
        ////        theAnswer.Received_DT = Convert.ToDateTime(r[7]);
        ////        theAnswer.SubmittalNumber = Convert.ToInt32(r[8]);
        ////        theAnswer.SubmittalChildNumber = Convert.ToInt32(r[9]);
        ////        theAnswer.PlanSubmittalStatusID = Convert.ToInt32(r[10]);
        ////        theAnswer.PSStatus = r[11].ToString();
        ////        //theAnswer.SubmittalDispositionID = (r[12].. Convert.ToInt32(r[12]);
        ////        theAnswer.PSDisp = r[13].ToString();
        ////        theAnswer.MediaID = Convert.ToInt32(r[14]);
        ////        theAnswer.PSMedia = r[15].ToString();
        ////        theList.Add(theAnswer);
        ////    }


        //    System.Data.SqlClient.SqlCommand command2 = new System.Data.SqlClient.SqlCommand();
        //    command2.Connection = connection;
        //    command2.CommandText = "PIPESLINK.PIPES2D.dbo.sp_GetAllRoles";
        //    command2.CommandType = System.Data.CommandType.StoredProcedure;

        //    SqlDataAdapter adapter2 = new SqlDataAdapter(command2);
        //    DataSet dataSet2 = new DataSet();
        //    adapter2.Fill(dataSet2);
        //    if (dataSet2.Tables.Count > 0)
        //    {
        //        //sp_getAllContacts_Result
        //        table2 = dataSet2.Tables[0];
        //    }

        //    //sp_getAllRoles_Result theRoles = new sp_getAllRoles_Result();
        //    //List<sp_getAllRoles_Result> theRolesList = new List<sp_getAllRoles_Result>();

        //    //foreach (DataRow r in table2.Rows)
        //    //{
        //    //    theRoles = new sp_getAllRoles_Result();
        //    //    theRoles.ROLEID = Convert.ToInt32(r[0]);
        //    //    theRoles.ROLE_TYPE = r[1].ToString();
        //    //    theRoles.IS_ACTIVE = Convert.ToBoolean(r[2]);
        //    //    theRolesList.Add(theRoles);
        //    //}






        //        connection.Close();


        //    //        //CreatePOCRequestEmail(collection);

        //    //        //return RedirectToAction("Index", "Home");
        //    //    }
        //    //}
        //    return View();
        //}

        /// <summary>
        /// CreatePOCRequestEmail sends to the Modeling Team and Development Services Group that a new POC request has been submitted.
        /// </summary>
        /// <param name="contactEMail">A string represending the Contact EMail of the contact.</param>
        protected void CreatePOCRequestEmail(FormCollection collection)
        {
            string[] recipientList = { ConfigurationManager.AppSettings["POCRequestNotifyList"].ToString() };
            string senderEmail = ConfigurationManager.AppSettings["returnEmailAddress"].ToString();
            
            // ***
            // *** this version has more detail if they ever decided to send more detail ***
            // ***
            //string subject = "PIPES Portal -> A New POC Request has been submitted!";
            //string body = "A new POC Request with the description: <br /><br />" +
            //"Description : " + collection["PROJECTDESC"].ToString() + "<br /><br />" +
            //"ParcelNumber: " + collection["ParcelNumber"].ToString() + "<br /><br />" +
            //"ERU: " + collection["ERU"].ToString() + "<br /><br />" +
            //"QAVG: " + collection["QAVG"].ToString() + "<br /><br />" + 
            //"Please inspect and take appropriate action - Thank You";

            // From Heidi Martell email describing email notification templates 5/31/2018
            string subject = "POC Request";
            string body = "<br /><br />A point of connection (POC) request has been submitted.";

            EMail emailToSend = new EMail();
            if (!emailToSend.SendEMail(subject,
             body,
             null,                  // To
             null,                  // CC
             recipientList,    // BCC
             senderEmail))          // From
            {
                ViewBag.ErrorMsg = "ERROR: EMAIL WAS NOT SENT. Verify email addresses.";
                ViewBag.RedirectToProjectRecord = false;
                Redirect("~/Views/Shared/Error.cshtml");
            }
        }


        // GET: POCREQUEST/Edit/5
        public ActionResult Edit(int id)
        {
            return View();
        }

        // POST: POCREQUEST/Edit/5
        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        // GET: POCREQUEST/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        // POST: POCREQUEST/Delete/5
        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
    }
}
