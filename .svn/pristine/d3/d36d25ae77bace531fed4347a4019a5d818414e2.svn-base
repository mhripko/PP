using RestSharp;
using RestSharp.Authenticators;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using PORTAL.Models;
using PORTAL.Custom;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using System.Data.SqlClient;
using System.Configuration;
using Newtonsoft.Json;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Data;

namespace PORTAL.Controllers
{
    public class INSPREQUESTController : Controller
    {
        private PIPESPORTALEntities db = new PIPESPORTALEntities();

        private static long InspectionAssetProjectID = LookUpId.INSPECTIONASSET.Where(l => l.VALUE.Trim() == "PROJECT").FirstOrDefault().PDBLOOKUPID;
        private static long InspectionAssetManholeID = LookUpId.INSPECTIONASSET.Where(l => l.VALUE.Trim() == "MANHOLE").FirstOrDefault().PDBLOOKUPID;
        private static long InspectionAssetPipeID = LookUpId.INSPECTIONASSET.Where(l => l.VALUE.Trim() == "PIPE").FirstOrDefault().PDBLOOKUPID;


        // GET: INSPECTIONREQ
        public ActionResult Index()
        {
            //var iNSPECTIONREQS = db.INSPECTIONREQ.Include(i => i.CONTACT).Include(i => i.CONTACT1).Include(i => i.PROJECT).Include(i => i.LOOKUP).Include(i => i.LOOKUP1);
            //return View(iNSPECTIONREQS.ToList());
            return View();
        }


        ///// <summary>
        ///// MyProjects_Read is called by a Kendo UI Grid to read the rows.
        ///// </summary>
        ///// <param name="request"></param>
        ///// <returns></returns>
        //public ActionResult MyProjectInsps_Read([DataSourceRequest]DataSourceRequest request, long? id = 0, string pf = "")
        //{
        //    if ((long)id == 0)
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

        //    List<spGetMyProjects_Result> mps = db.spGetMyProjects(id, null).ToList();


        //    if ((string)pf == "INSP")
        //        mps = mps.Where(f => f.InspsExempt == null).ToList();

        //    DataSourceResult result = mps.ToDataSourceResult(request);

        //    return Json(result);
        //}


        public ActionResult MyProjects_Read([DataSourceRequest]DataSourceRequest request, long? contactId = 0, long? projectId = 0, string pf = "")
        {
            if ((long)contactId == 0)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            // This is your web api call...
            string uri = string.Format("http://localhost:2932/api/contacts/{0}/projects/{1}", contactId, projectId);
            var client = new RestClient();
            client.BaseUrl = new Uri(uri);
            var apiRequest = new RestRequest(uri, Method.GET);
            IRestResponse response = client.Execute(apiRequest);
            List<spGetMyProjects_Result> mps = JsonConvert.DeserializeObject<List<spGetMyProjects_Result>>(response.Content);

            if ((string)pf != "")
            {
                if ((string)pf == "PR")
                    mps = mps.Where(f => f.PLANSREQUIRED == true).ToList();
                else if ((string)pf == "INSP")
                    mps = mps.Where(f => f.InspsExempt == null).ToList();
            }

            DataSourceResult result = mps.ToDataSourceResult(request);

            return Json(result);
        }


        // GET: INSPECTIONREQ/Details/5
        public ActionResult Details(long? id)
        {
            if (id == null)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            //INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
            //if (inspReq == null)
            //{
            //    return HttpNotFound();
            //}
            //return View(inspReq);
            return View();
        }

        // GET: INSPECTIONREQ/Create
        public ActionResult Create(long? id = 0)
        {
            if (id == 0)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            bool userHasAccessToProject = db.USERPROJS.Where(c => (c.ProjectID == id) && (c.ContactID == 1) && (c.IS_ACTIVE)).FirstOrDefault() == null ? false : true;

            spGetMyProjects_Result project = db.spGetMyProjects(1, id).FirstOrDefault();

            checkIfInspectionsToRequest((long) id, (long)project.PIIIWFNUM, InspectionAssetProjectID, (long)id, null, (int) project.NumPIAs);

            return View();
        }


        // POST: INSPECTIONREQ/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Create([Bind(Include = "INSPECTIONREQID,REQUESTSTATUSID,PROJECTID,REQUESTDATE,CALLERID,FIELDCONTACTID,FROM_DT,TO_DT,WORK_SHIFT,OT_STARTTIME,IS_ACTIVE,ADDED_BY,ADDED_DT,UPDATED_BY,UPDATED_DT")] INSPECTIONREQ inspReq)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        //db.INSPECTIONREQ.Add(inspReq);
        //        //db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }

        //    //ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.CALLERID);
        //    //ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.FIELDCONTACTID);
        //    //ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER", inspReq.PROJECTID);
        //    //ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.REQUESTSTATUSID);
        //    //ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.WORK_SHIFT);

        //    return View(inspReq);
        //}

                    
        // INSPECTIONS/checkIfInspectionsToRequest
        protected void checkIfInspectionsToRequest(long ProjID, long IWFNUM, long AssetTypeID, long AssetID, long? InspTypeID, int NumPIAs)
        {
            //ViewData["ReadyForFINALInspection"] = true;
            //ViewData["ReadyForBONDRELInspection"] = false;
            //List<sp_getProjInspWorkflow_Result> ProjInspWorkflow = null;
            //List<sp_getProjInspWorkflow_Result> failingProjInspWorkflow = null;
            //List<sp_getProjOOOInspections_Result> ProjOOOInsps = null;
            //List<sp_getProjOOOInspections_Result> failingProjOOOInsps = null;
            //if ((bool)ViewBag.InspWKFLWApproved)
            //{
            //    // Get the Workflow Inspections
            //    ProjInspWorkflow = db.sp_getProjInspWorkflow(ProjID).ToList();

            //    // Get the Out-Of-Order Inspections
            //    ProjOOOInsps = db.sp_getProjOOOInspections(ProjID).ToList();

            //    long failedInspections = 0;
            //    long WFFailedInspections = 0;
            //    long NWFFailedInspections = 0;

            //    if ((ProjInspWorkflow != null) && (ProjInspWorkflow.Count() > 0))
            //    {
            //        failingProjInspWorkflow = ProjInspWorkflow.Where(w => (w.DISPOSITIONID != inspectionPassDispID)
            //                                            && (w.PIT_INSPECTIONTYPEID != FInspTypeID)
            //                                            && (w.PIT_INSPECTIONTYPEID != BRInspTypeID)
            //                                            && (!w.PIT_INSP_NOT_REQUIRED)).ToList();
            //        failingProjOOOInsps = ProjOOOInsps.Where(w => ((w.DISPOSITIONID != inspectionPassDispID))
            //                                                && (w.INSPECTIONSTATUSID != cancelledInspStatusID)).ToList();

            //        WFFailedInspections = failingProjInspWorkflow.Count();
            //        NWFFailedInspections = failingProjOOOInsps.Count();

            //        failedInspections = ProjInspWorkflow.Where(w => (w.DISPOSITIONID != inspectionPassDispID)
            //                                            && (w.PIT_INSPECTIONTYPEID != FInspTypeID)
            //                                            && (w.PIT_INSPECTIONTYPEID != BRInspTypeID)
            //                                            && (!w.PIT_INSP_NOT_REQUIRED)).Count()
            //                            +
            //                            ProjOOOInsps.Where(w => ((w.DISPOSITIONID != inspectionPassDispID)
            //                                && (w.INSPECTIONSTATUSID != cancelledInspStatusID))).Count();

            //        if (failedInspections > 0)
            //            ViewData["ReadyForFINALInspection"] = false;
            //        else if (ProjInspWorkflow.Where(w => (w.DISPOSITIONID == inspectionPassDispID)
            //                                            && (w.PIT_INSPECTIONTYPEID == FInspTypeID)).Count() > 0)
            //        {
            //            ViewData["ReadyForFINALInspection"] = false;
            //            ViewData["ReadyForBONDRELInspection"] = true;

            //            if (ProjInspWorkflow.Where(w => (w.DISPOSITIONID == inspectionPassDispID)
            //                                            && (w.PIT_INSPECTIONTYPEID == BRInspTypeID)).Count() > 0)
            //                ViewData["ReadyForBONDRELInspection"] = false;
            //        }
            //    }
            //    else
            //        ViewData["ReadyForFINALInspection"] = false;
            //}
            //else
            //    ViewData["ReadyForFINALInspection"] = false;


            //if (fromLV && ((bool)ViewBag.InspWKFLWApproved) && (ProjInspWorkflow.Count() > 0))
            //{
            //    if (NumPIAs > 0)
            //        checkProjectInspectionWorkflow(ProjID, ProjInspWorkflow, IWFNUM);
            //    else
            //        checkNOAssetProjectInspectionWorkflow(ProjID, ProjInspWorkflow);
            //}


            //List<sp_getProjInspWorkflowHoldPoints_Result> holdPoints = db.sp_getProjInspWorkflowHoldPoints(ProjID, InspTypeID, AssetTypeID, AssetID).ToList();

            //long currHoldingPoint = 0;
            //long completedID = (long)db.sp_getLookupID("INSPECTIONSTATUS", "COMPLETED").FirstOrDefault();
            //foreach (var hp in holdPoints)
            //{
            //    if (hp.CompStatus == completedID)
            //    {
            //        currHoldingPoint = (long)hp.INSPECTIONTYPEID;
            //        break;
            //    }
            //}

            //List<sp_getNextProjInspToReq_Result> nextInspections = db.sp_getNextProjInspToReq(ProjID, currHoldingPoint, ProjID, InspectionAssetProjectID, (int)IWFNUM).ToList();
            //if (((nextInspections == null) || (nextInspections.Count == 0)) && ((ViewBag.InspReqForProjectAllowed != null) && (!ViewBag.InspReqForProjectAllowed)))
            //    ViewBag.InspReqForProjectAllowed = false;
        }


        // GET: INSPECTIONREQ/Edit/5
        //public ActionResult Edit(long? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
        //    if (inspReq == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.CALLERID);
        //    ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.FIELDCONTACTID);
        //    ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER", inspReq.PROJECTID);
        //    ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.REQUESTSTATUSID);
        //    ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.WORK_SHIFT);
        //    return View(inspReq);
        //}


        //// POST: INSPECTIONREQ/Edit/5
        //// To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        //// more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Edit([Bind(Include = "INSPECTIONREQID,REQUESTSTATUSID,PROJECTID,REQUESTDATE,CALLERID,FIELDCONTACTID,FROM_DT,TO_DT,WORK_SHIFT,OT_STARTTIME,IS_ACTIVE,ADDED_BY,ADDED_DT,UPDATED_BY,UPDATED_DT")] INSPECTIONREQ inspReq)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        db.Entry(inspReq).State = EntityState.Modified;
        //        db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }
        //    ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.CALLERID);
        //    ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.FIELDCONTACTID);
        //    ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER", inspReq.PROJECTID);
        //    ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.REQUESTSTATUSID);
        //    ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.WORK_SHIFT);
        //    return View(inspReq);
        //}


        //// GET: INSPECTIONREQ/Delete/5
        //public ActionResult Delete(long? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
        //    if (inspReq == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(inspReq);
        //}


        //// POST: INSPECTIONREQ/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public ActionResult DeleteConfirmed(long id)
        //{
        //    INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
        //    db.INSPECTIONREQ.Remove(inspReq);
        //    db.SaveChanges();
        //    return RedirectToAction("Index");
        //}


        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}