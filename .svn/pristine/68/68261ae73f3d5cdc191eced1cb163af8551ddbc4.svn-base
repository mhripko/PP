@************************************************************************************@
@************************************************************************************@
@*****                                                                          *****@
@*****  FileName: /Views/PRREQUEST/ProjectPlans.cshtml                          *****@
@*****  Copyright: CCWRD - 2018                                                 *****@
@*****  Author: Aaron Araujo                                                    *****@
@*****                                                                          *****@
@************************************************************************************@
@************************************************************************************@

<script type = "text/javascript" >

    // Used by Kendo Grid to Initialize the Actions column menus
    function PlansGridInitMenus(e)
    {
        var grid = this;
        $(".templateCell").each(function () {
            var cell = $(this),
                item = grid.dataItem(cell.closest("tr"));

            eval($(this).children("script").last().html());

            var menu = $("#menu_plansgrid_" + item.PROJECTID).data("kendoMenu");
            if (menu) {
                // Could put something here to conditionally remove a menu based on something in the data
                // In our case we're going to remove ANY menu items that have the text of 'HideMe'
                menu.remove('.k-item:has(>a[href*="HideMe"]),.k-item[onclick*="HideMe"]');
            }
        });
    }


    // Used to insure only one detail row per grid is open at a time
    function PGDetailExpand(ev)
    {
        var expandedRow = $(ev.sender.wrapper).data('expandedRow');
        // Only one open at a time
        if (expandedRow && expandedRow[0] != ev.masterRow[0])
        {
            var grid = $(ev.sender.wrapper).data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        $(ev.sender.wrapper).data('expandedRow', ev.masterRow);
    }


    function composeStage(submittal) {
        var html = '';
        
        html += submittal.PlanRevisionNumber + '.' + submittal.SubmittalNumber + " (" + submittal.Media.substring(0,5) + ")";

        return html;
    }


    function myPlansCheckPlanReviewActionUrl(data) {
        if (data.PSDisp == "PLANS APPROVED") {
            return 'HideMe';
        }
    }

</script>

<script id = "PlansGridTemplate" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<PORTAL.Models.spForPortal_GetProjectPlans_Result>()
        .Name("grid_ProjPlanRevs#=PlanSubmittalID#")
        .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(false)
                .PageSize(15)
                .Read(read => read.Action("ProjectPlans_Read", "PRREQUEST", new { id = "#= PROJECTID#" }))
        )
        .Columns(columns =>
        {
            //columns.Bound(c => c.PlanSubmittalID).Width("10%").Title("PSID").HtmlAttributes(new { @class = "text-align: center;" });
            columns.Bound(c => c.Received_DT).Width("20%").Title("RECEIVED<br />DATE").HtmlAttributes(new { @class = "text-align: center;" }).ClientTemplate("\\#= kendo.toString(Received_DT, 'g') \\#");
            columns.Bound(c => c.PlanRevisionNumber).Width("10%").Title("STAGE").HtmlAttributes(new { @class = "text-align: center;" }).ClientTemplate("\\#= composeStage(data) \\#");
            columns.Bound(c => c.PlanReviewStatus).Width("20%").Title("REVIEW<br />STATUS").HtmlAttributes(new { @class = "text-align: center;" });
            columns.Bound(c => c.DISPOSITION).Width("20%").Title("DISPOSITION").HtmlAttributes(new { @class = "text-align: center;" });
            columns.Template(@<text></text>).Title("<B>ACTIONS</B>").HtmlAttributes(new { @class = "templateCell" })
                .ClientTemplate(
                    Html.Kendo().Menu()
                        .Name("submenu_planreviews_#=PlanSubmittalID#")
                        .Orientation(MenuOrientation.Vertical).Direction("left")
                        .Items(its =>
                        {
                            its.Add().Text("SELECT").Items(nested =>
                            {
                                nested.Add().Text("<span class='noExpand'><i class='fa fa-binoculars fa-fw' aria-hidden='true'></i>&nbsp;&nbsp;View Inspection Details</span>");
                            });
                        })
                        .ToClientTemplate().ToHtmlString().Replace("#", "\\\\#").Replace("\n", "").Replace("\r", "")
                );
        })
        .Events(ev => ev.DataBound("function(e){this.tbody.find('script').each(function(){eval($(this).html())})}"))
        .Filterable(filterable => filterable
            .Extra(false)
            .Operators(operators => operators
            .ForString(str => str.Clear()
            .Contains("Contains")
        )))
        .NoRecords(n => n.Template("NO RECORDS TO DISPLAY."))
        .Pageable(pageable => pageable
            .Refresh(true)
            .ButtonCount(5))
        .Sortable()
        .ToClientTemplate()
    )

</script>

<h2>My Plan Reviews</h2>

<div class="centeredElement" style="height: auto !important;">
    @(Html.Kendo().Grid<PORTAL.Models.spGetMyProjects_Result>
        ()
        .Name("myProjectsPlansGrid")
        .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .Read(read => read.Action("MyProjects_Read", "PRREQUEST", new { contactId = ViewData["CONTACTID"], projectId = ViewData["PROJID"], pf="PR" }))
            .PageSize(25)
        )
        .Columns(columns =>
        {
            columns.Bound(c => c.PROJECTNUMBER).Title("PIPES #").HtmlAttributes(new { @class = "text-align: center;" });
            columns.Bound(c => c.PROJECTNAME).Title("PROJECT").HtmlAttributes(new { @class = "text-align: center;" });
            columns.Template(@<text></text>).Title("<B>ACTIONS</B>").HtmlAttributes(new { @class = "templateCell" })
            .ClientTemplate(
                Html.Kendo().Menu()
                .Name("menu_plansgrid_#=PROJECTID#")
                .Orientation(MenuOrientation.Vertical).Direction("left")
                .Items(its =>
                {
                    its.Add().Text("SELECT").Items(nested =>
                    {
                        nested.Add().Text("<span class='noExpand'><i class='fa fa-hand-stop-o fa-fw' aria-hidden='true'></i> Request Plan Review</span>").Url("#= myPlansCheckPlanReviewActionUrl(data) #").HtmlAttributes(new { @class = "noExpand" });
                    });
                })
                .ToClientTemplate().ToHtmlString()
            );
        })
        .ClientDetailTemplateId("PlansGridTemplate")
        .Events(ev => ev.DataBound("PlansGridInitMenus").DetailExpand("PGDetailExpand"))
        .HtmlAttributes(new { style = "height: 100%; width: 100%; font-size: 1em !important;" })
        .Filterable(filterable => filterable
            .Extra(false)
            .Operators(operators => operators
            .ForString(str => str.Clear()
                .Contains("Contains")
                .StartsWith("Starts with")
                .IsEqualTo("Is equal to")
                .IsNotEqualTo("Is not equal to")
            ))
        )
        .Groupable()
        .Sortable()
        .NoRecords(n => n.Template("YOU HAVE NOT BEEN ASSIGNED ANY PROJECTS."))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .PageSizes(new[] { 5, 10 })
        .ButtonCount(5))
    )
</div>

<style>
    .k-grid tr td {
        overflow: visible;
    }
</style>