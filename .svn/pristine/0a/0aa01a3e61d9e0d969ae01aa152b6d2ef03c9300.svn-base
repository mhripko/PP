using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using PORTAL.Models;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;

namespace PORTAL.Controllers
{
    public class INSPREQUESTController : Controller
    {
        private PORTALEntities db = new PORTALEntities();

        // GET: INSPECTIONREQ
        public ActionResult Index()
        {
            //var iNSPECTIONREQS = db.INSPECTIONREQ.Include(i => i.CONTACT).Include(i => i.CONTACT1).Include(i => i.PROJECT).Include(i => i.LOOKUP).Include(i => i.LOOKUP1);
            //return View(iNSPECTIONREQS.ToList());
            return View();
        }


        /// <summary>
        /// MyProjects_Read is called by a Kendo UI Grid to read the rows.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ActionResult MyProjects_Read([DataSourceRequest]DataSourceRequest request, long? id = 0, string pf = "")
        {
            if ((long)id == 0)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            List<spGetMyProjects_Result> mps = db.spGetMyProjects(id).ToList();

            if ((string)pf != "")
            {
                if ((string)pf == "PR")
                    mps = mps.Where(f => f.PLANSREQUIRED == true).ToList();
                else if ((string)pf == "INSP")
                    mps = mps.Where(f => f.InspsExempt == null).ToList();
            }

            DataSourceResult result = mps.ToDataSourceResult(request);

            return Json(result);
        }


        // GET: INSPECTIONREQ/Details/5
        public ActionResult Details(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            //INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
            //if (inspReq == null)
            //{
            //    return HttpNotFound();
            //}
            //return View(inspReq);
            return View();
        }

        // GET: INSPECTIONREQ/Create
        public ActionResult Create()
        {
            //ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME");
            //ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME");
            //ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER");
            //ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE");
            //ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE");
            return View();
        }

        // POST: INSPECTIONREQ/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Create([Bind(Include = "INSPECTIONREQID,REQUESTSTATUSID,PROJECTID,REQUESTDATE,CALLERID,FIELDCONTACTID,FROM_DT,TO_DT,WORK_SHIFT,OT_STARTTIME,IS_ACTIVE,ADDED_BY,ADDED_DT,UPDATED_BY,UPDATED_DT")] INSPECTIONREQ inspReq)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        //db.INSPECTIONREQ.Add(inspReq);
        //        //db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }

        //    //ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.CALLERID);
        //    //ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.FIELDCONTACTID);
        //    //ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER", inspReq.PROJECTID);
        //    //ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.REQUESTSTATUSID);
        //    //ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.WORK_SHIFT);

        //    return View(inspReq);
        //}


        // GET: INSPECTIONREQ/Edit/5
        //public ActionResult Edit(long? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
        //    if (inspReq == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.CALLERID);
        //    ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.FIELDCONTACTID);
        //    ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER", inspReq.PROJECTID);
        //    ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.REQUESTSTATUSID);
        //    ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.WORK_SHIFT);
        //    return View(inspReq);
        //}


        //// POST: INSPECTIONREQ/Edit/5
        //// To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        //// more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Edit([Bind(Include = "INSPECTIONREQID,REQUESTSTATUSID,PROJECTID,REQUESTDATE,CALLERID,FIELDCONTACTID,FROM_DT,TO_DT,WORK_SHIFT,OT_STARTTIME,IS_ACTIVE,ADDED_BY,ADDED_DT,UPDATED_BY,UPDATED_DT")] INSPECTIONREQ inspReq)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        db.Entry(inspReq).State = EntityState.Modified;
        //        db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }
        //    ViewBag.CALLERID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.CALLERID);
        //    ViewBag.FIELDCONTACTID = new SelectList(db.CONTACTS, "CONTACTID", "INTERNALUSERNAME", inspReq.FIELDCONTACTID);
        //    ViewBag.PROJECTID = new SelectList(db.PROJECTS, "PROJECTID", "PROJECTNUMBER", inspReq.PROJECTID);
        //    ViewBag.REQUESTSTATUSID = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.REQUESTSTATUSID);
        //    ViewBag.WORK_SHIFT = new SelectList(db.LOOKUPs, "LOOKUPID", "FIELDTYPE", inspReq.WORK_SHIFT);
        //    return View(inspReq);
        //}


        //// GET: INSPECTIONREQ/Delete/5
        //public ActionResult Delete(long? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
        //    if (inspReq == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(inspReq);
        //}


        //// POST: INSPECTIONREQ/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public ActionResult DeleteConfirmed(long id)
        //{
        //    INSPECTIONREQ inspReq = db.INSPECTIONREQ.Find(id);
        //    db.INSPECTIONREQ.Remove(inspReq);
        //    db.SaveChanges();
        //    return RedirectToAction("Index");
        //}


        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
