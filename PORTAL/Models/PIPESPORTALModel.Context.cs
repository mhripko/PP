//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PORTAL.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PIPESPORTALEntities : DbContext
    {
        public PIPESPORTALEntities()
            : base("name=PIPESPORTALEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<COMPANYPROJS> COMPANYPROJS { get; set; }
        public virtual DbSet<PDBLOOKUP> PDBLOOKUP { get; set; }
        public virtual DbSet<USERPOC> USERPOC { get; set; }
        public virtual DbSet<USERPROJS> USERPROJS { get; set; }
    
        public virtual ObjectResult<spCompanyLookup_Result> spCompanyLookup(Nullable<long> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCompanyLookup_Result>("spCompanyLookup", companyIdParameter);
        }
    
        public virtual int spDeleteContacts(Nullable<long> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteContacts", contactIdParameter);
        }
    
        public virtual int spDeleteInspectionRequest(Nullable<long> inspectionRequestId)
        {
            var inspectionRequestIdParameter = inspectionRequestId.HasValue ?
                new ObjectParameter("InspectionRequestId", inspectionRequestId) :
                new ObjectParameter("InspectionRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteInspectionRequest", inspectionRequestIdParameter);
        }
    
        public virtual int spDeleteLookup(Nullable<long> lookupId)
        {
            var lookupIdParameter = lookupId.HasValue ?
                new ObjectParameter("LookupId", lookupId) :
                new ObjectParameter("LookupId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteLookup", lookupIdParameter);
        }
    
        public virtual int spDeletePlanReviewRequest(Nullable<long> planReviewRequestId)
        {
            var planReviewRequestIdParameter = planReviewRequestId.HasValue ?
                new ObjectParameter("PlanReviewRequestId", planReviewRequestId) :
                new ObjectParameter("PlanReviewRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePlanReviewRequest", planReviewRequestIdParameter);
        }
    
        public virtual int spDeletePOCRequest(Nullable<long> pOCRequestId)
        {
            var pOCRequestIdParameter = pOCRequestId.HasValue ?
                new ObjectParameter("POCRequestId", pOCRequestId) :
                new ObjectParameter("POCRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePOCRequest", pOCRequestIdParameter);
        }
    
        public virtual ObjectResult<spGetAllCompanies_Result> spGetAllCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCompanies_Result>("spGetAllCompanies");
        }
    
        public virtual ObjectResult<spGetAllContacts_Result> spGetAllContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllContacts_Result>("spGetAllContacts");
        }
    
        public virtual ObjectResult<spGetAllContactsForSearch_Result> spGetAllContactsForSearch(Nullable<long> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllContactsForSearch_Result>("spGetAllContactsForSearch", companyIdParameter);
        }
    
        public virtual int spGetAllCreateNewProjectRequest_DONOTUSE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllCreateNewProjectRequest_DONOTUSE");
        }
    
        public virtual ObjectResult<spGetAllInspectionRequests_DONOTUSE_Result> spGetAllInspectionRequests_DONOTUSE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllInspectionRequests_DONOTUSE_Result>("spGetAllInspectionRequests_DONOTUSE");
        }
    
        public virtual int spGetAllPlanReviewRequests_DONOTUSE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllPlanReviewRequests_DONOTUSE");
        }
    
        public virtual ObjectResult<spGetAllPOCRequests_Result> spGetAllPOCRequests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPOCRequests_Result>("spGetAllPOCRequests");
        }
    
        public virtual ObjectResult<spGetAllProjects_DONOTUSE_Result> spGetAllProjects_DONOTUSE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllProjects_DONOTUSE_Result>("spGetAllProjects_DONOTUSE");
        }
    
        public virtual ObjectResult<spGetAllRoles_Result> spGetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllRoles_Result>("spGetAllRoles");
        }
    
        public virtual ObjectResult<spGetCompany_Result> spGetCompany(Nullable<long> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCompany_Result>("spGetCompany", companyIdParameter);
        }
    
        public virtual ObjectResult<spGetContact_Result> spGetContact(Nullable<long> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetContact_Result>("spGetContact", contactIdParameter);
        }
    
        public virtual ObjectResult<spGetMyProjects_DONOTUSE_Result> spGetMyProjects_DONOTUSE(Nullable<long> contactId, Nullable<long> projectId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMyProjects_DONOTUSE_Result>("spGetMyProjects_DONOTUSE", contactIdParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<spGetMyProjectsX_DONOTUSE_Result> spGetMyProjectsX_DONOTUSE(Nullable<long> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMyProjectsX_DONOTUSE_Result>("spGetMyProjectsX_DONOTUSE", cIDParameter);
        }
    
        public virtual int spGetPlanReviewRequest_DONOTUSE(Nullable<long> pRREQUESTID)
        {
            var pRREQUESTIDParameter = pRREQUESTID.HasValue ?
                new ObjectParameter("PRREQUESTID", pRREQUESTID) :
                new ObjectParameter("PRREQUESTID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetPlanReviewRequest_DONOTUSE", pRREQUESTIDParameter);
        }
    
        public virtual ObjectResult<spGetProjectPlans_DONOTUSE_Result> spGetProjectPlans_DONOTUSE(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectPlans_DONOTUSE_Result>("spGetProjectPlans_DONOTUSE", projIDParameter);
        }
    
        public virtual int spgetvwCompanyInfo(Nullable<long> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spgetvwCompanyInfo", cidParameter);
        }
    
        public virtual ObjectResult<spInsertContact_Result> spInsertContact(Nullable<long> contactTypeId, string iNTERNALUSERNAME, string contactName, string contactPhone, string extension, string eMAIL, Nullable<long> companyId, Nullable<bool> iS_ACTIVE, string aDDED_BY, Nullable<System.DateTime> aDDED_DT, string uPDATED_BY, Nullable<System.DateTime> uPDATED_DT)
        {
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(long));
    
            var iNTERNALUSERNAMEParameter = iNTERNALUSERNAME != null ?
                new ObjectParameter("INTERNALUSERNAME", iNTERNALUSERNAME) :
                new ObjectParameter("INTERNALUSERNAME", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var eMAILParameter = eMAIL != null ?
                new ObjectParameter("EMAIL", eMAIL) :
                new ObjectParameter("EMAIL", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var iS_ACTIVEParameter = iS_ACTIVE.HasValue ?
                new ObjectParameter("IS_ACTIVE", iS_ACTIVE) :
                new ObjectParameter("IS_ACTIVE", typeof(bool));
    
            var aDDED_BYParameter = aDDED_BY != null ?
                new ObjectParameter("ADDED_BY", aDDED_BY) :
                new ObjectParameter("ADDED_BY", typeof(string));
    
            var aDDED_DTParameter = aDDED_DT.HasValue ?
                new ObjectParameter("ADDED_DT", aDDED_DT) :
                new ObjectParameter("ADDED_DT", typeof(System.DateTime));
    
            var uPDATED_BYParameter = uPDATED_BY != null ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(string));
    
            var uPDATED_DTParameter = uPDATED_DT.HasValue ?
                new ObjectParameter("UPDATED_DT", uPDATED_DT) :
                new ObjectParameter("UPDATED_DT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertContact_Result>("spInsertContact", contactTypeIdParameter, iNTERNALUSERNAMEParameter, contactNameParameter, contactPhoneParameter, extensionParameter, eMAILParameter, companyIdParameter, iS_ACTIVEParameter, aDDED_BYParameter, aDDED_DTParameter, uPDATED_BYParameter, uPDATED_DTParameter);
        }
    
        public virtual int spInsertCreateNewProjectRequest(string projectName, string parcelNumber, string aCCELA, string nSCROSSSTREETS, string eWCROSSSTREETS, string dEVELOPER, Nullable<long> dEVELOPERPROJECTNUMBER, string eNGINEERINGFIRM, string cONTRACTOR, string pDFFILE, string rEQUEST_BY, Nullable<System.DateTime> rEQUEST_DT)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var parcelNumberParameter = parcelNumber != null ?
                new ObjectParameter("ParcelNumber", parcelNumber) :
                new ObjectParameter("ParcelNumber", typeof(string));
    
            var aCCELAParameter = aCCELA != null ?
                new ObjectParameter("ACCELA", aCCELA) :
                new ObjectParameter("ACCELA", typeof(string));
    
            var nSCROSSSTREETSParameter = nSCROSSSTREETS != null ?
                new ObjectParameter("NSCROSSSTREETS", nSCROSSSTREETS) :
                new ObjectParameter("NSCROSSSTREETS", typeof(string));
    
            var eWCROSSSTREETSParameter = eWCROSSSTREETS != null ?
                new ObjectParameter("EWCROSSSTREETS", eWCROSSSTREETS) :
                new ObjectParameter("EWCROSSSTREETS", typeof(string));
    
            var dEVELOPERParameter = dEVELOPER != null ?
                new ObjectParameter("DEVELOPER", dEVELOPER) :
                new ObjectParameter("DEVELOPER", typeof(string));
    
            var dEVELOPERPROJECTNUMBERParameter = dEVELOPERPROJECTNUMBER.HasValue ?
                new ObjectParameter("DEVELOPERPROJECTNUMBER", dEVELOPERPROJECTNUMBER) :
                new ObjectParameter("DEVELOPERPROJECTNUMBER", typeof(long));
    
            var eNGINEERINGFIRMParameter = eNGINEERINGFIRM != null ?
                new ObjectParameter("ENGINEERINGFIRM", eNGINEERINGFIRM) :
                new ObjectParameter("ENGINEERINGFIRM", typeof(string));
    
            var cONTRACTORParameter = cONTRACTOR != null ?
                new ObjectParameter("CONTRACTOR", cONTRACTOR) :
                new ObjectParameter("CONTRACTOR", typeof(string));
    
            var pDFFILEParameter = pDFFILE != null ?
                new ObjectParameter("PDFFILE", pDFFILE) :
                new ObjectParameter("PDFFILE", typeof(string));
    
            var rEQUEST_BYParameter = rEQUEST_BY != null ?
                new ObjectParameter("REQUEST_BY", rEQUEST_BY) :
                new ObjectParameter("REQUEST_BY", typeof(string));
    
            var rEQUEST_DTParameter = rEQUEST_DT.HasValue ?
                new ObjectParameter("REQUEST_DT", rEQUEST_DT) :
                new ObjectParameter("REQUEST_DT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCreateNewProjectRequest", projectNameParameter, parcelNumberParameter, aCCELAParameter, nSCROSSSTREETSParameter, eWCROSSSTREETSParameter, dEVELOPERParameter, dEVELOPERPROJECTNUMBERParameter, eNGINEERINGFIRMParameter, cONTRACTORParameter, pDFFILEParameter, rEQUEST_BYParameter, rEQUEST_DTParameter);
        }
    
        public virtual int spInsertPlanReviewRequest(string projectNumber, string projectName, string pDFFILE, string rEQUEST_BY, Nullable<System.DateTime> rEQUEST_DT)
        {
            var projectNumberParameter = projectNumber != null ?
                new ObjectParameter("ProjectNumber", projectNumber) :
                new ObjectParameter("ProjectNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var pDFFILEParameter = pDFFILE != null ?
                new ObjectParameter("PDFFILE", pDFFILE) :
                new ObjectParameter("PDFFILE", typeof(string));
    
            var rEQUEST_BYParameter = rEQUEST_BY != null ?
                new ObjectParameter("REQUEST_BY", rEQUEST_BY) :
                new ObjectParameter("REQUEST_BY", typeof(string));
    
            var rEQUEST_DTParameter = rEQUEST_DT.HasValue ?
                new ObjectParameter("REQUEST_DT", rEQUEST_DT) :
                new ObjectParameter("REQUEST_DT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPlanReviewRequest", projectNumberParameter, projectNameParameter, pDFFILEParameter, rEQUEST_BYParameter, rEQUEST_DTParameter);
        }
    
        public virtual int spInsertPOCRequest(string projectDescription, string parcelNumber, Nullable<double> eRU, Nullable<double> qAVG, string rEQUEST_BY, Nullable<System.DateTime> rEQUEST_DT)
        {
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("ProjectDescription", projectDescription) :
                new ObjectParameter("ProjectDescription", typeof(string));
    
            var parcelNumberParameter = parcelNumber != null ?
                new ObjectParameter("ParcelNumber", parcelNumber) :
                new ObjectParameter("ParcelNumber", typeof(string));
    
            var eRUParameter = eRU.HasValue ?
                new ObjectParameter("ERU", eRU) :
                new ObjectParameter("ERU", typeof(double));
    
            var qAVGParameter = qAVG.HasValue ?
                new ObjectParameter("QAVG", qAVG) :
                new ObjectParameter("QAVG", typeof(double));
    
            var rEQUEST_BYParameter = rEQUEST_BY != null ?
                new ObjectParameter("REQUEST_BY", rEQUEST_BY) :
                new ObjectParameter("REQUEST_BY", typeof(string));
    
            var rEQUEST_DTParameter = rEQUEST_DT.HasValue ?
                new ObjectParameter("REQUEST_DT", rEQUEST_DT) :
                new ObjectParameter("REQUEST_DT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPOCRequest", projectDescriptionParameter, parcelNumberParameter, eRUParameter, qAVGParameter, rEQUEST_BYParameter, rEQUEST_DTParameter);
        }
    
        public virtual int spLINK_SYNC_COMPANIES(Nullable<long> cOMPANYID)
        {
            var cOMPANYIDParameter = cOMPANYID.HasValue ?
                new ObjectParameter("COMPANYID", cOMPANYID) :
                new ObjectParameter("COMPANYID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLINK_SYNC_COMPANIES", cOMPANYIDParameter);
        }
    
        public virtual int spLINK_SYNC_CONTACT(Nullable<long> cONTACTID)
        {
            var cONTACTIDParameter = cONTACTID.HasValue ?
                new ObjectParameter("CONTACTID", cONTACTID) :
                new ObjectParameter("CONTACTID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLINK_SYNC_CONTACT", cONTACTIDParameter);
        }
    
        public virtual int spUpdateCompany(Nullable<long> cOMPANYID, string cOMPANYNAME, Nullable<long> cOMPANYTYPEID, string aDDRESS, string aDDRESS2, string cITY, string sTATE, Nullable<long> zIP, Nullable<long> zIP2, string tELEPHONE, string eXTENSION, string fAX, string eMAIL, Nullable<bool> iS_ACTIVE, string uPDATED_BY, Nullable<System.DateTime> uPDATED_DT, string cONTACTNAME, Nullable<bool> iS_BPPORTALADMIN)
        {
            var cOMPANYIDParameter = cOMPANYID.HasValue ?
                new ObjectParameter("COMPANYID", cOMPANYID) :
                new ObjectParameter("COMPANYID", typeof(long));
    
            var cOMPANYNAMEParameter = cOMPANYNAME != null ?
                new ObjectParameter("COMPANYNAME", cOMPANYNAME) :
                new ObjectParameter("COMPANYNAME", typeof(string));
    
            var cOMPANYTYPEIDParameter = cOMPANYTYPEID.HasValue ?
                new ObjectParameter("COMPANYTYPEID", cOMPANYTYPEID) :
                new ObjectParameter("COMPANYTYPEID", typeof(long));
    
            var aDDRESSParameter = aDDRESS != null ?
                new ObjectParameter("ADDRESS", aDDRESS) :
                new ObjectParameter("ADDRESS", typeof(string));
    
            var aDDRESS2Parameter = aDDRESS2 != null ?
                new ObjectParameter("ADDRESS2", aDDRESS2) :
                new ObjectParameter("ADDRESS2", typeof(string));
    
            var cITYParameter = cITY != null ?
                new ObjectParameter("CITY", cITY) :
                new ObjectParameter("CITY", typeof(string));
    
            var sTATEParameter = sTATE != null ?
                new ObjectParameter("STATE", sTATE) :
                new ObjectParameter("STATE", typeof(string));
    
            var zIPParameter = zIP.HasValue ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(long));
    
            var zIP2Parameter = zIP2.HasValue ?
                new ObjectParameter("ZIP2", zIP2) :
                new ObjectParameter("ZIP2", typeof(long));
    
            var tELEPHONEParameter = tELEPHONE != null ?
                new ObjectParameter("TELEPHONE", tELEPHONE) :
                new ObjectParameter("TELEPHONE", typeof(string));
    
            var eXTENSIONParameter = eXTENSION != null ?
                new ObjectParameter("EXTENSION", eXTENSION) :
                new ObjectParameter("EXTENSION", typeof(string));
    
            var fAXParameter = fAX != null ?
                new ObjectParameter("FAX", fAX) :
                new ObjectParameter("FAX", typeof(string));
    
            var eMAILParameter = eMAIL != null ?
                new ObjectParameter("EMAIL", eMAIL) :
                new ObjectParameter("EMAIL", typeof(string));
    
            var iS_ACTIVEParameter = iS_ACTIVE.HasValue ?
                new ObjectParameter("IS_ACTIVE", iS_ACTIVE) :
                new ObjectParameter("IS_ACTIVE", typeof(bool));
    
            var uPDATED_BYParameter = uPDATED_BY != null ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(string));
    
            var uPDATED_DTParameter = uPDATED_DT.HasValue ?
                new ObjectParameter("UPDATED_DT", uPDATED_DT) :
                new ObjectParameter("UPDATED_DT", typeof(System.DateTime));
    
            var cONTACTNAMEParameter = cONTACTNAME != null ?
                new ObjectParameter("CONTACTNAME", cONTACTNAME) :
                new ObjectParameter("CONTACTNAME", typeof(string));
    
            var iS_BPPORTALADMINParameter = iS_BPPORTALADMIN.HasValue ?
                new ObjectParameter("IS_BPPORTALADMIN", iS_BPPORTALADMIN) :
                new ObjectParameter("IS_BPPORTALADMIN", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCompany", cOMPANYIDParameter, cOMPANYNAMEParameter, cOMPANYTYPEIDParameter, aDDRESSParameter, aDDRESS2Parameter, cITYParameter, sTATEParameter, zIPParameter, zIP2Parameter, tELEPHONEParameter, eXTENSIONParameter, fAXParameter, eMAILParameter, iS_ACTIVEParameter, uPDATED_BYParameter, uPDATED_DTParameter, cONTACTNAMEParameter, iS_BPPORTALADMINParameter);
        }
    }
}
