//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PORTAL.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PIPESEntities : DbContext
    {
        public PIPESEntities()
            : base("name=PIPESEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ABOUTCONTENT> ABOUTCONTENT { get; set; }
        public virtual DbSet<ACL> ACL { get; set; }
        public virtual DbSet<ASSETATTRIBS> ASSETATTRIBS { get; set; }
        public virtual DbSet<ATTACHMENTS> ATTACHMENTS { get; set; }
        public virtual DbSet<Calendar> Calendar { get; set; }
        public virtual DbSet<CERTSOFOCC> CERTSOFOCC { get; set; }
        public virtual DbSet<CHECKSHEET> CHECKSHEET { get; set; }
        public virtual DbSet<CHECKSHEETTEMPLATE> CHECKSHEETTEMPLATE { get; set; }
        public virtual DbSet<COMMENTS> COMMENTS { get; set; }
        public virtual DbSet<COMPANIES> COMPANIES { get; set; }
        public virtual DbSet<CONTACTLOOKUPS> CONTACTLOOKUPS { get; set; }
        public virtual DbSet<CONTACTS> CONTACTS { get; set; }
        public virtual DbSet<CREATENEWPROJECTREQUEST> CREATENEWPROJECTREQUEST { get; set; }
        public virtual DbSet<CSTINFO> CSTINFO { get; set; }
        public virtual DbSet<DISCREPANCIES> DISCREPANCIES { get; set; }
        public virtual DbSet<EASEMENTS> EASEMENTS { get; set; }
        public virtual DbSet<EMAILGROUPS> EMAILGROUPS { get; set; }
        public virtual DbSet<EMAILRECIPIENTS> EMAILRECIPIENTS { get; set; }
        public virtual DbSet<EMAILS> EMAILS { get; set; }
        public virtual DbSet<ExternalUsers> ExternalUsers { get; set; }
        public virtual DbSet<FORMRIGHTS> FORMRIGHTS { get; set; }
        public virtual DbSet<FORMS> FORMS { get; set; }
        public virtual DbSet<HOLIDAYS> HOLIDAYS { get; set; }
        public virtual DbSet<INSPATTRIBS> INSPATTRIBS { get; set; }
        public virtual DbSet<INSPCHAINOFCUSTODY> INSPCHAINOFCUSTODY { get; set; }
        public virtual DbSet<INSPCHECKSHEET> INSPCHECKSHEET { get; set; }
        public virtual DbSet<INSPCHECKSHEETATTRIBS> INSPCHECKSHEETATTRIBS { get; set; }
        public virtual DbSet<INSPCHECKSHEETTEMPLATE> INSPCHECKSHEETTEMPLATE { get; set; }
        public virtual DbSet<INSPECTIONREQS> INSPECTIONREQS { get; set; }
        public virtual DbSet<INSPECTIONS> INSPECTIONS { get; set; }
        public virtual DbSet<INSPECTORS> INSPECTORS { get; set; }
        public virtual DbSet<INSPWORKFLOWS> INSPWORKFLOWS { get; set; }
        public virtual DbSet<IWFINFO> IWFINFO { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Logins> Logins { get; set; }
        public virtual DbSet<LOOKUP> LOOKUP { get; set; }
        public virtual DbSet<MANHOLES> MANHOLES { get; set; }
        public virtual DbSet<PARCELS> PARCELS { get; set; }
        public virtual DbSet<PLANCHAINOFCUSTODY> PLANCHAINOFCUSTODY { get; set; }
        public virtual DbSet<PLANREVIEWMETRICS> PLANREVIEWMETRICS { get; set; }
        public virtual DbSet<PLANREVIEWREQUEST> PLANREVIEWREQUEST { get; set; }
        public virtual DbSet<PLANREVISIONS> PLANREVISIONS { get; set; }
        public virtual DbSet<PLANSUBMITTALS> PLANSUBMITTALS { get; set; }
        public virtual DbSet<PLANTRANSFERWORKFLOW> PLANTRANSFERWORKFLOW { get; set; }
        public virtual DbSet<POCREQUEST> POCREQUEST { get; set; }
        public virtual DbSet<PRIVINSPOBJS> PRIVINSPOBJS { get; set; }
        public virtual DbSet<PROJCOMPANIES> PROJCOMPANIES { get; set; }
        public virtual DbSet<PROJCONTACTS> PROJCONTACTS { get; set; }
        public virtual DbSet<PROJECTATTRIBLEVELS> PROJECTATTRIBLEVELS { get; set; }
        public virtual DbSet<PROJECTATTRIBS> PROJECTATTRIBS { get; set; }
        public virtual DbSet<PROJECTPHASES> PROJECTPHASES { get; set; }
        public virtual DbSet<PROJECTS> PROJECTS { get; set; }
        public virtual DbSet<PROJINSPASSETS> PROJINSPASSETS { get; set; }
        public virtual DbSet<PROJINSPINFO> PROJINSPINFO { get; set; }
        public virtual DbSet<PROJINSPTEMPLATE> PROJINSPTEMPLATE { get; set; }
        public virtual DbSet<PROJMATERIALS> PROJMATERIALS { get; set; }
        public virtual DbSet<PROJOOOINSPS> PROJOOOINSPS { get; set; }
        public virtual DbSet<PROJPOCS> PROJPOCS { get; set; }
        public virtual DbSet<REVASSETS> REVASSETS { get; set; }
        public virtual DbSet<ROLES> ROLES { get; set; }
        public virtual DbSet<SEGMENTS> SEGMENTS { get; set; }
        public virtual DbSet<SSGRAVITYMAIN> SSGRAVITYMAIN { get; set; }
        public virtual DbSet<SSJOBSTARTSLINES> SSJOBSTARTSLINES { get; set; }
        public virtual DbSet<SSJOBSTARTSPOINT> SSJOBSTARTSPOINT { get; set; }
        public virtual DbSet<SSMANHOLE> SSMANHOLE { get; set; }
        public virtual DbSet<SYSCONST> SYSCONST { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<SystemUsers> SystemUsers { get; set; }
        public virtual DbSet<UPLOADEDDOCS> UPLOADEDDOCS { get; set; }
        public virtual DbSet<ManagerReportStaticData> ManagerReportStaticData { get; set; }
        public virtual DbSet<PRREQUEST> PRREQUEST { get; set; }
        public virtual DbSet<vwAboutItems_ACTIVE> vwAboutItems_ACTIVE { get; set; }
        public virtual DbSet<vwAboutItems_ALL> vwAboutItems_ALL { get; set; }
        public virtual DbSet<vwACLInfo> vwACLInfo { get; set; }
        public virtual DbSet<vwApplicationVersions_ACTIVE> vwApplicationVersions_ACTIVE { get; set; }
        public virtual DbSet<vwApplicationVersions_ALL> vwApplicationVersions_ALL { get; set; }
        public virtual DbSet<vwCompanyInfo> vwCompanyInfo { get; set; }
        public virtual DbSet<vwFORMRIGHTSInfo> vwFORMRIGHTSInfo { get; set; }
        public virtual DbSet<vwSegmentInfo> vwSegmentInfo { get; set; }
    
        [DbFunction("PIPESEntities", "fn_GetProjectInfoFromCorrectionType")]
        public virtual IQueryable<fn_GetProjectInfoFromCorrectionType_Result> fn_GetProjectInfoFromCorrectionType(Nullable<long> ownerTypeID, Nullable<long> recordId)
        {
            var ownerTypeIDParameter = ownerTypeID.HasValue ?
                new ObjectParameter("ownerTypeID", ownerTypeID) :
                new ObjectParameter("ownerTypeID", typeof(long));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetProjectInfoFromCorrectionType_Result>("[PIPESEntities].[fn_GetProjectInfoFromCorrectionType](@ownerTypeID, @RecordId)", ownerTypeIDParameter, recordIdParameter);
        }
    
        public virtual ObjectResult<rpt_buildchecksheet_sp_Result> rpt_buildchecksheet_sp(Nullable<long> projId, Nullable<long> pSId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var pSIdParameter = pSId.HasValue ?
                new ObjectParameter("PSId", pSId) :
                new ObjectParameter("PSId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_buildchecksheet_sp_Result>("rpt_buildchecksheet_sp", projIdParameter, pSIdParameter);
        }
    
        public virtual ObjectResult<rpt_buildinspchecksheet_sp_Result> rpt_buildinspchecksheet_sp(Nullable<long> inspId, Nullable<long> inspType, Nullable<int> wfNum)
        {
            var inspIdParameter = inspId.HasValue ?
                new ObjectParameter("InspId", inspId) :
                new ObjectParameter("InspId", typeof(long));
    
            var inspTypeParameter = inspType.HasValue ?
                new ObjectParameter("InspType", inspType) :
                new ObjectParameter("InspType", typeof(long));
    
            var wfNumParameter = wfNum.HasValue ?
                new ObjectParameter("wfNum", wfNum) :
                new ObjectParameter("wfNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_buildinspchecksheet_sp_Result>("rpt_buildinspchecksheet_sp", inspIdParameter, inspTypeParameter, wfNumParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_cancelInspRequest(Nullable<long> rEQID, string userName)
        {
            var rEQIDParameter = rEQID.HasValue ?
                new ObjectParameter("REQID", rEQID) :
                new ObjectParameter("REQID", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_cancelInspRequest", rEQIDParameter, userNameParameter);
        }
    
        public virtual int sp_cancelInspRequestFromLD(Nullable<long> rEQID, string userName, Nullable<long> cancelParam)
        {
            var rEQIDParameter = rEQID.HasValue ?
                new ObjectParameter("REQID", rEQID) :
                new ObjectParameter("REQID", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var cancelParamParameter = cancelParam.HasValue ?
                new ObjectParameter("CancelParam", cancelParam) :
                new ObjectParameter("CancelParam", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_cancelInspRequestFromLD", rEQIDParameter, userNameParameter, cancelParamParameter);
        }
    
        public virtual int sp_cancelProjInspWorkflow(Nullable<long> projID, string userName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_cancelProjInspWorkflow", projIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<sp_checkIfSubAssetOOOInspExists_Result> sp_checkIfSubAssetOOOInspExists(Nullable<long> projId, Nullable<long> pIAID, Nullable<long> iTID, string sAN)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var pIAIDParameter = pIAID.HasValue ?
                new ObjectParameter("PIAID", pIAID) :
                new ObjectParameter("PIAID", typeof(long));
    
            var iTIDParameter = iTID.HasValue ?
                new ObjectParameter("ITID", iTID) :
                new ObjectParameter("ITID", typeof(long));
    
            var sANParameter = sAN != null ?
                new ObjectParameter("SAN", sAN) :
                new ObjectParameter("SAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_checkIfSubAssetOOOInspExists_Result>("sp_checkIfSubAssetOOOInspExists", projIdParameter, pIAIDParameter, iTIDParameter, sANParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_deactivateExternalAsset(Nullable<long> projID, Nullable<long> projInspAssetId, string userName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var projInspAssetIdParameter = projInspAssetId.HasValue ?
                new ObjectParameter("projInspAssetId", projInspAssetId) :
                new ObjectParameter("projInspAssetId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deactivateExternalAsset", projIDParameter, projInspAssetIdParameter, userNameParameter);
        }
    
        public virtual int sp_deactivatePOC(Nullable<long> projID, string assetName, string userName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("assetName", assetName) :
                new ObjectParameter("assetName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deactivatePOC", projIDParameter, assetNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<sp_displayAdverseComments_Result> sp_displayAdverseComments(Nullable<long> projid)
        {
            var projidParameter = projid.HasValue ?
                new ObjectParameter("projid", projid) :
                new ObjectParameter("projid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_displayAdverseComments_Result>("sp_displayAdverseComments", projidParameter);
        }
    
        public virtual ObjectResult<sp_displayProjInspWorkflow_Result> sp_displayProjInspWorkflow(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_displayProjInspWorkflow_Result>("sp_displayProjInspWorkflow", projIDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_forEditProjInspWorkflow_Result> sp_forEditProjInspWorkflow(Nullable<long> projID, Nullable<int> iWF_NUM)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_forEditProjInspWorkflow_Result>("sp_forEditProjInspWorkflow", projIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<sp_getAboutContentVersions_Result> sp_getAboutContentVersions(Nullable<bool> getEverything, Nullable<long> pipesVersion)
        {
            var getEverythingParameter = getEverything.HasValue ?
                new ObjectParameter("getEverything", getEverything) :
                new ObjectParameter("getEverything", typeof(bool));
    
            var pipesVersionParameter = pipesVersion.HasValue ?
                new ObjectParameter("pipesVersion", pipesVersion) :
                new ObjectParameter("pipesVersion", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAboutContentVersions_Result>("sp_getAboutContentVersions", getEverythingParameter, pipesVersionParameter);
        }
    
        public virtual ObjectResult<sp_getAboutContentWithVersion_Result> sp_getAboutContentWithVersion(Nullable<bool> getEverything, Nullable<long> pipesVersion)
        {
            var getEverythingParameter = getEverything.HasValue ?
                new ObjectParameter("getEverything", getEverything) :
                new ObjectParameter("getEverything", typeof(bool));
    
            var pipesVersionParameter = pipesVersion.HasValue ?
                new ObjectParameter("pipesVersion", pipesVersion) :
                new ObjectParameter("pipesVersion", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAboutContentWithVersion_Result>("sp_getAboutContentWithVersion", getEverythingParameter, pipesVersionParameter);
        }
    
        public virtual int sp_getActiveInspectionChecksheet(Nullable<long> iTYPEID)
        {
            var iTYPEIDParameter = iTYPEID.HasValue ?
                new ObjectParameter("ITYPEID", iTYPEID) :
                new ObjectParameter("ITYPEID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getActiveInspectionChecksheet", iTYPEIDParameter);
        }
    
        public virtual ObjectResult<sp_getActiveInspWorkflow_Result> sp_getActiveInspWorkflow()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getActiveInspWorkflow_Result>("sp_getActiveInspWorkflow");
        }
    
        public virtual ObjectResult<sp_getActivePlanReviewChecksheet_Result> sp_getActivePlanReviewChecksheet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getActivePlanReviewChecksheet_Result>("sp_getActivePlanReviewChecksheet");
        }
    
        public virtual ObjectResult<sp_getAllContacts_Result> sp_getAllContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllContacts_Result>("sp_getAllContacts");
        }
    
        public virtual ObjectResult<sp_getAllForms_Result> sp_getAllForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllForms_Result>("sp_getAllForms");
        }
    
        public virtual ObjectResult<sp_getAllInspCounts_Result> sp_getAllInspCounts(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllInspCounts_Result>("sp_getAllInspCounts", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getAllMHForProj_Result> sp_getAllMHForProj(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllMHForProj_Result>("sp_getAllMHForProj", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getAllPlanCounts_Result> sp_getAllPlanCounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllPlanCounts_Result>("sp_getAllPlanCounts");
        }
    
        public virtual ObjectResult<sp_getAllRoles_Result> sp_getAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllRoles_Result>("sp_getAllRoles");
        }
    
        public virtual ObjectResult<sp_getAllSegments_Result> sp_getAllSegments(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllSegments_Result>("sp_getAllSegments", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getAPNPerProject_Result> sp_getAPNPerProject(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAPNPerProject_Result>("sp_getAPNPerProject", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual ObjectResult<sp_getAssetInspWorkflow_Result> sp_getAssetInspWorkflow(Nullable<long> projID, Nullable<long> assetID, Nullable<long> assetTypeID, Nullable<int> iWF_NUM)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(long));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAssetInspWorkflow_Result>("sp_getAssetInspWorkflow", projIDParameter, assetIDParameter, assetTypeIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<string> sp_getAssetName(Nullable<long> projID, Nullable<long> inspTypeID, Nullable<long> assetID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("InspTypeID", inspTypeID) :
                new ObjectParameter("InspTypeID", typeof(long));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getAssetName", projIDParameter, inspTypeIDParameter, assetIDParameter);
        }
    
        public virtual ObjectResult<sp_getAssets_rpt_Result> sp_getAssets_rpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> inspectorId, string projNum, string projName, Nullable<int> inspectionType)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIdParameter = inspectorId.HasValue ?
                new ObjectParameter("inspectorId", inspectorId) :
                new ObjectParameter("inspectorId", typeof(int));
    
            var projNumParameter = projNum != null ?
                new ObjectParameter("projNum", projNum) :
                new ObjectParameter("projNum", typeof(string));
    
            var projNameParameter = projName != null ?
                new ObjectParameter("projName", projName) :
                new ObjectParameter("projName", typeof(string));
    
            var inspectionTypeParameter = inspectionType.HasValue ?
                new ObjectParameter("inspectionType", inspectionType) :
                new ObjectParameter("inspectionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAssets_rpt_Result>("sp_getAssets_rpt", startDateParameter, endDateParameter, inspectorIdParameter, projNumParameter, projNameParameter, inspectionTypeParameter);
        }
    
        public virtual ObjectResult<sp_getCalendarAllInspCount_Result> sp_getCalendarAllInspCount(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCalendarAllInspCount_Result>("sp_getCalendarAllInspCount", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getCalendarAllProject_Result> sp_getCalendarAllProject(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> inspectorID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCalendarAllProject_Result>("sp_getCalendarAllProject", startDateParameter, endDateParameter, inspectorIDParameter);
        }
    
        public virtual ObjectResult<sp_getCalendarAllProjectCount_Result> sp_getCalendarAllProjectCount(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> inspectorID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCalendarAllProjectCount_Result>("sp_getCalendarAllProjectCount", startDateParameter, endDateParameter, inspectorIDParameter);
        }
    
        public virtual ObjectResult<sp_getCalendarInspForInspector_Result> sp_getCalendarInspForInspector(Nullable<long> inspectorID, Nullable<long> projID, Nullable<long> inspStatus, Nullable<long> inspDisp, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            var inspDispParameter = inspDisp.HasValue ?
                new ObjectParameter("InspDisp", inspDisp) :
                new ObjectParameter("InspDisp", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCalendarInspForInspector_Result>("sp_getCalendarInspForInspector", inspectorIDParameter, projIDParameter, inspStatusParameter, inspDispParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getCapacityMetrics_Result> sp_getCapacityMetrics(Nullable<long> projID, Nullable<long> planRevID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var planRevIDParameter = planRevID.HasValue ?
                new ObjectParameter("PlanRevID", planRevID) :
                new ObjectParameter("PlanRevID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCapacityMetrics_Result>("sp_getCapacityMetrics", projIDParameter, planRevIDParameter);
        }
    
        public virtual ObjectResult<sp_getCapacityMetricsForReport_Result> sp_getCapacityMetricsForReport(Nullable<System.DateTime> beg_dt, Nullable<System.DateTime> end_dt)
        {
            var beg_dtParameter = beg_dt.HasValue ?
                new ObjectParameter("Beg_dt", beg_dt) :
                new ObjectParameter("Beg_dt", typeof(System.DateTime));
    
            var end_dtParameter = end_dt.HasValue ?
                new ObjectParameter("End_dt", end_dt) :
                new ObjectParameter("End_dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCapacityMetricsForReport_Result>("sp_getCapacityMetricsForReport", beg_dtParameter, end_dtParameter);
        }
    
        public virtual ObjectResult<sp_getCapacityMetricsFromAI_Result> sp_getCapacityMetricsFromAI(Nullable<long> projID, Nullable<long> revNum)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var revNumParameter = revNum.HasValue ?
                new ObjectParameter("revNum", revNum) :
                new ObjectParameter("revNum", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCapacityMetricsFromAI_Result>("sp_getCapacityMetricsFromAI", projIDParameter, revNumParameter);
        }
    
        public virtual ObjectResult<sp_getCheckSheetComments_Result> sp_getCheckSheetComments(Nullable<long> pSID, Nullable<long> rN, Nullable<long> sRN)
        {
            var pSIDParameter = pSID.HasValue ?
                new ObjectParameter("PSID", pSID) :
                new ObjectParameter("PSID", typeof(long));
    
            var rNParameter = rN.HasValue ?
                new ObjectParameter("RN", rN) :
                new ObjectParameter("RN", typeof(long));
    
            var sRNParameter = sRN.HasValue ?
                new ObjectParameter("SRN", sRN) :
                new ObjectParameter("SRN", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCheckSheetComments_Result>("sp_getCheckSheetComments", pSIDParameter, rNParameter, sRNParameter);
        }
    
        public virtual ObjectResult<sp_getCheckSheetData_Result> sp_getCheckSheetData(Nullable<long> planSubmittalID)
        {
            var planSubmittalIDParameter = planSubmittalID.HasValue ?
                new ObjectParameter("PlanSubmittalID", planSubmittalID) :
                new ObjectParameter("PlanSubmittalID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCheckSheetData_Result>("sp_getCheckSheetData", planSubmittalIDParameter);
        }
    
        public virtual ObjectResult<sp_getContactLookUpInfo_Result> sp_getContactLookUpInfo(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getContactLookUpInfo_Result>("sp_getContactLookUpInfo", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getCorrections_Result> sp_getCorrections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCorrections_Result>("sp_getCorrections");
        }
    
        public virtual ObjectResult<sp_getCSTINFOEntry_Result> sp_getCSTINFOEntry(Nullable<long> inspTypeID, Nullable<int> iWF_NUM)
        {
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("inspTypeID", inspTypeID) :
                new ObjectParameter("inspTypeID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getCSTINFOEntry_Result>("sp_getCSTINFOEntry", inspTypeIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<sp_getDistinctProjInsp_Result> sp_getDistinctProjInsp(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> inspectorID, Nullable<int> iWF_NUM)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDistinctProjInsp_Result>("sp_getDistinctProjInsp", startDateParameter, endDateParameter, inspectorIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<sp_getEmailGroupRecipients_Result> sp_getEmailGroupRecipients(Nullable<long> projId, Nullable<long> emailGroupTypeID)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var emailGroupTypeIDParameter = emailGroupTypeID.HasValue ?
                new ObjectParameter("EmailGroupTypeID", emailGroupTypeID) :
                new ObjectParameter("EmailGroupTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailGroupRecipients_Result>("sp_getEmailGroupRecipients", projIdParameter, emailGroupTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_getEmailGroupsForAllProjects_Result> sp_getEmailGroupsForAllProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailGroupsForAllProjects_Result>("sp_getEmailGroupsForAllProjects");
        }
    
        public virtual ObjectResult<sp_getEmailGroupsForProject_Result> sp_getEmailGroupsForProject(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailGroupsForProject_Result>("sp_getEmailGroupsForProject", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getEmailReceiptsForProj_Result> sp_getEmailReceiptsForProj(Nullable<long> inspectorID, Nullable<long> projID, Nullable<long> inspStatus, Nullable<long> inspDisp, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            var inspDispParameter = inspDisp.HasValue ?
                new ObjectParameter("InspDisp", inspDisp) :
                new ObjectParameter("InspDisp", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailReceiptsForProj_Result>("sp_getEmailReceiptsForProj", inspectorIDParameter, projIDParameter, inspStatusParameter, inspDispParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getEmailSentInfo_Result> sp_getEmailSentInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailSentInfo_Result>("sp_getEmailSentInfo");
        }
    
        public virtual ObjectResult<sp_getEmailsForInspReceipts_Result> sp_getEmailsForInspReceipts(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailsForInspReceipts_Result>("sp_getEmailsForInspReceipts", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getEmailsForPlansPickup_Result> sp_getEmailsForPlansPickup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailsForPlansPickup_Result>("sp_getEmailsForPlansPickup");
        }
    
        public virtual int sp_GetGISfromMAXPROD_Nightly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetGISfromMAXPROD_Nightly");
        }
    
        public virtual ObjectResult<sp_getInspChainOfCustody_Result> sp_getInspChainOfCustody(Nullable<long> inspId)
        {
            var inspIdParameter = inspId.HasValue ?
                new ObjectParameter("InspId", inspId) :
                new ObjectParameter("InspId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getInspChainOfCustody_Result>("sp_getInspChainOfCustody", inspIdParameter);
        }
    
        public virtual ObjectResult<sp_getInspChecksheetComments_Result> sp_getInspChecksheetComments(Nullable<long> inspId, Nullable<bool> getDX)
        {
            var inspIdParameter = inspId.HasValue ?
                new ObjectParameter("InspId", inspId) :
                new ObjectParameter("InspId", typeof(long));
    
            var getDXParameter = getDX.HasValue ?
                new ObjectParameter("getDX", getDX) :
                new ObjectParameter("getDX", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getInspChecksheetComments_Result>("sp_getInspChecksheetComments", inspIdParameter, getDXParameter);
        }
    
        public virtual ObjectResult<sp_getInspChecksheetReqComments_Result> sp_getInspChecksheetReqComments(Nullable<long> inspID, Nullable<long> inspTypeID, Nullable<long> inspReqDescOrder)
        {
            var inspIDParameter = inspID.HasValue ?
                new ObjectParameter("InspID", inspID) :
                new ObjectParameter("InspID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("InspTypeID", inspTypeID) :
                new ObjectParameter("InspTypeID", typeof(long));
    
            var inspReqDescOrderParameter = inspReqDescOrder.HasValue ?
                new ObjectParameter("InspReqDescOrder", inspReqDescOrder) :
                new ObjectParameter("InspReqDescOrder", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getInspChecksheetReqComments_Result>("sp_getInspChecksheetReqComments", inspIDParameter, inspTypeIDParameter, inspReqDescOrderParameter);
        }
    
        public virtual ObjectResult<sp_getInspDashboardMetrics_Result> sp_getInspDashboardMetrics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getInspDashboardMetrics_Result>("sp_getInspDashboardMetrics");
        }
    
        public virtual ObjectResult<sp_GetInspectionMetrics_rpt_Result> sp_GetInspectionMetrics_rpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> inspectorId, Nullable<int> inspectionType, Nullable<int> projId, Nullable<int> disposition)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIdParameter = inspectorId.HasValue ?
                new ObjectParameter("inspectorId", inspectorId) :
                new ObjectParameter("inspectorId", typeof(int));
    
            var inspectionTypeParameter = inspectionType.HasValue ?
                new ObjectParameter("inspectionType", inspectionType) :
                new ObjectParameter("inspectionType", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(int));
    
            var dispositionParameter = disposition.HasValue ?
                new ObjectParameter("disposition", disposition) :
                new ObjectParameter("disposition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInspectionMetrics_rpt_Result>("sp_GetInspectionMetrics_rpt", startDateParameter, endDateParameter, inspectorIdParameter, inspectionTypeParameter, projIdParameter, dispositionParameter);
        }
    
        public virtual ObjectResult<sp_getInspProjects_Result> sp_getInspProjects(Nullable<System.DateTime> startDate, Nullable<long> inspectorID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getInspProjects_Result>("sp_getInspProjects", startDateParameter, inspectorIDParameter);
        }
    
        public virtual ObjectResult<sp_getInspReqCommentsForInspector_Result> sp_getInspReqCommentsForInspector(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> inspectorID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getInspReqCommentsForInspector_Result>("sp_getInspReqCommentsForInspector", startDateParameter, endDateParameter, inspectorIDParameter);
        }
    
        public virtual ObjectResult<sp_getLastCheckSheetData_Result> sp_getLastCheckSheetData(Nullable<long> projectID, Nullable<long> planSubmittalID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(long));
    
            var planSubmittalIDParameter = planSubmittalID.HasValue ?
                new ObjectParameter("PlanSubmittalID", planSubmittalID) :
                new ObjectParameter("PlanSubmittalID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastCheckSheetData_Result>("sp_getLastCheckSheetData", projectIDParameter, planSubmittalIDParameter);
        }
    
        public virtual ObjectResult<sp_getLastCheckSheetData2_Result> sp_getLastCheckSheetData2(Nullable<long> projectID, Nullable<long> planSubmittalID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(long));
    
            var planSubmittalIDParameter = planSubmittalID.HasValue ?
                new ObjectParameter("PlanSubmittalID", planSubmittalID) :
                new ObjectParameter("PlanSubmittalID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastCheckSheetData2_Result>("sp_getLastCheckSheetData2", projectIDParameter, planSubmittalIDParameter);
        }
    
        public virtual ObjectResult<sp_getLastInspChecksheetComment_Result> sp_getLastInspChecksheetComment(Nullable<long> inspID, Nullable<long> commentTypeID, Nullable<bool> lastComment)
        {
            var inspIDParameter = inspID.HasValue ?
                new ObjectParameter("InspID", inspID) :
                new ObjectParameter("InspID", typeof(long));
    
            var commentTypeIDParameter = commentTypeID.HasValue ?
                new ObjectParameter("CommentTypeID", commentTypeID) :
                new ObjectParameter("CommentTypeID", typeof(long));
    
            var lastCommentParameter = lastComment.HasValue ?
                new ObjectParameter("LastComment", lastComment) :
                new ObjectParameter("LastComment", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastInspChecksheetComment_Result>("sp_getLastInspChecksheetComment", inspIDParameter, commentTypeIDParameter, lastCommentParameter);
        }
    
        public virtual ObjectResult<sp_getLastInspCheckSheetData_Result> sp_getLastInspCheckSheetData(Nullable<long> inspID, Nullable<long> projId, Nullable<long> inspType, Nullable<long> assetID)
        {
            var inspIDParameter = inspID.HasValue ?
                new ObjectParameter("InspID", inspID) :
                new ObjectParameter("InspID", typeof(long));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var inspTypeParameter = inspType.HasValue ?
                new ObjectParameter("InspType", inspType) :
                new ObjectParameter("InspType", typeof(long));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastInspCheckSheetData_Result>("sp_getLastInspCheckSheetData", inspIDParameter, projIdParameter, inspTypeParameter, assetIDParameter);
        }
    
        public virtual ObjectResult<sp_getLastInspForProjByType_Result> sp_getLastInspForProjByType(Nullable<long> inspType, Nullable<long> projID)
        {
            var inspTypeParameter = inspType.HasValue ?
                new ObjectParameter("InspType", inspType) :
                new ObjectParameter("InspType", typeof(long));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastInspForProjByType_Result>("sp_getLastInspForProjByType", inspTypeParameter, projIDParameter);
        }
    
        public virtual ObjectResult<sp_getLastProjInspection_Result> sp_getLastProjInspection(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastProjInspection_Result>("sp_getLastProjInspection", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getLastProjPlanSubmittalActivity_Result> sp_getLastProjPlanSubmittalActivity(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLastProjPlanSubmittalActivity_Result>("sp_getLastProjPlanSubmittalActivity", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getLookUpEntriesForInspByAsset_Result> sp_getLookUpEntriesForInspByAsset(Nullable<long> assetType)
        {
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("assetType", assetType) :
                new ObjectParameter("assetType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLookUpEntriesForInspByAsset_Result>("sp_getLookUpEntriesForInspByAsset", assetTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_getLookupID(string lookupFieldType, string lookupValue)
        {
            var lookupFieldTypeParameter = lookupFieldType != null ?
                new ObjectParameter("LookupFieldType", lookupFieldType) :
                new ObjectParameter("LookupFieldType", typeof(string));
    
            var lookupValueParameter = lookupValue != null ?
                new ObjectParameter("LookupValue", lookupValue) :
                new ObjectParameter("LookupValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_getLookupID", lookupFieldTypeParameter, lookupValueParameter);
        }
    
        public virtual ObjectResult<sp_getManholeAbandonmentInsp_rpt_Result> sp_getManholeAbandonmentInsp_rpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getManholeAbandonmentInsp_rpt_Result>("sp_getManholeAbandonmentInsp_rpt", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getMHForProj_Result> sp_getMHForProj(Nullable<long> projId, Nullable<bool> segCreation)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            var segCreationParameter = segCreation.HasValue ?
                new ObjectParameter("segCreation", segCreation) :
                new ObjectParameter("segCreation", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMHForProj_Result>("sp_getMHForProj", projIdParameter, segCreationParameter);
        }
    
        public virtual ObjectResult<sp_getMHInspWorkflow_Result> sp_getMHInspWorkflow(Nullable<long> projId, Nullable<long> currAssetID)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMHInspWorkflow_Result>("sp_getMHInspWorkflow", projIdParameter, currAssetIDParameter);
        }
    
        public virtual ObjectResult<sp_getMHsForPIPE_Result> sp_getMHsForPIPE(Nullable<long> projID, Nullable<long> sEGID, Nullable<long> inspMHAssetTypeID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var sEGIDParameter = sEGID.HasValue ?
                new ObjectParameter("SEGID", sEGID) :
                new ObjectParameter("SEGID", typeof(long));
    
            var inspMHAssetTypeIDParameter = inspMHAssetTypeID.HasValue ?
                new ObjectParameter("InspMHAssetTypeID", inspMHAssetTypeID) :
                new ObjectParameter("InspMHAssetTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMHsForPIPE_Result>("sp_getMHsForPIPE", projIDParameter, sEGIDParameter, inspMHAssetTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_getMyPlanCounts_Result> sp_getMyPlanCounts(string reviewer)
        {
            var reviewerParameter = reviewer != null ?
                new ObjectParameter("Reviewer", reviewer) :
                new ObjectParameter("Reviewer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMyPlanCounts_Result>("sp_getMyPlanCounts", reviewerParameter);
        }
    
        public virtual ObjectResult<sp_getMyPlans_Result> sp_getMyPlans(string reviewer)
        {
            var reviewerParameter = reviewer != null ?
                new ObjectParameter("Reviewer", reviewer) :
                new ObjectParameter("Reviewer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMyPlans_Result>("sp_getMyPlans", reviewerParameter);
        }
    
        public virtual ObjectResult<sp_getNextProjInspToReq_Result> sp_getNextProjInspToReq(Nullable<long> projID, Nullable<long> currInspTypeID, Nullable<long> currAssetID, Nullable<long> currAssetTypeID, Nullable<int> iWF_NUM)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var currInspTypeIDParameter = currInspTypeID.HasValue ?
                new ObjectParameter("currInspTypeID", currInspTypeID) :
                new ObjectParameter("currInspTypeID", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            var currAssetTypeIDParameter = currAssetTypeID.HasValue ?
                new ObjectParameter("currAssetTypeID", currAssetTypeID) :
                new ObjectParameter("currAssetTypeID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getNextProjInspToReq_Result>("sp_getNextProjInspToReq", projIDParameter, currInspTypeIDParameter, currAssetIDParameter, currAssetTypeIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_getNextProjInspToReq_WIP(Nullable<long> projId, Nullable<long> currInspTypeID, Nullable<long> currAssetID, Nullable<long> currAssetTypeID)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            var currInspTypeIDParameter = currInspTypeID.HasValue ?
                new ObjectParameter("currInspTypeID", currInspTypeID) :
                new ObjectParameter("currInspTypeID", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            var currAssetTypeIDParameter = currAssetTypeID.HasValue ?
                new ObjectParameter("currAssetTypeID", currAssetTypeID) :
                new ObjectParameter("currAssetTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_getNextProjInspToReq_WIP", projIdParameter, currInspTypeIDParameter, currAssetIDParameter, currAssetTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_getNextProjInspToReq2_Result> sp_getNextProjInspToReq2(Nullable<long> projId, Nullable<long> currInspTypeID, Nullable<long> currAssetID, Nullable<long> currAssetTypeID, Nullable<long> iWF_NUM)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            var currInspTypeIDParameter = currInspTypeID.HasValue ?
                new ObjectParameter("currInspTypeID", currInspTypeID) :
                new ObjectParameter("currInspTypeID", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            var currAssetTypeIDParameter = currAssetTypeID.HasValue ?
                new ObjectParameter("currAssetTypeID", currAssetTypeID) :
                new ObjectParameter("currAssetTypeID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getNextProjInspToReq2_Result>("sp_getNextProjInspToReq2", projIdParameter, currInspTypeIDParameter, currAssetIDParameter, currAssetTypeIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<sp_getNextProjInspToReqBasedOnMHs_Result> sp_getNextProjInspToReqBasedOnMHs(Nullable<long> projId, Nullable<long> currInspTypeID, Nullable<long> currAssetID, Nullable<long> currAssetTypeID, Nullable<long> currInspOrder, Nullable<long> nextHoldingPointID, Nullable<int> iWF_NUM)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            var currInspTypeIDParameter = currInspTypeID.HasValue ?
                new ObjectParameter("currInspTypeID", currInspTypeID) :
                new ObjectParameter("currInspTypeID", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            var currAssetTypeIDParameter = currAssetTypeID.HasValue ?
                new ObjectParameter("currAssetTypeID", currAssetTypeID) :
                new ObjectParameter("currAssetTypeID", typeof(long));
    
            var currInspOrderParameter = currInspOrder.HasValue ?
                new ObjectParameter("currInspOrder", currInspOrder) :
                new ObjectParameter("currInspOrder", typeof(long));
    
            var nextHoldingPointIDParameter = nextHoldingPointID.HasValue ?
                new ObjectParameter("nextHoldingPointID", nextHoldingPointID) :
                new ObjectParameter("nextHoldingPointID", typeof(long));
    
            var iWF_NUMParameter = iWF_NUM.HasValue ?
                new ObjectParameter("IWF_NUM", iWF_NUM) :
                new ObjectParameter("IWF_NUM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getNextProjInspToReqBasedOnMHs_Result>("sp_getNextProjInspToReqBasedOnMHs", projIdParameter, currInspTypeIDParameter, currAssetIDParameter, currAssetTypeIDParameter, currInspOrderParameter, nextHoldingPointIDParameter, iWF_NUMParameter);
        }
    
        public virtual ObjectResult<sp_getPIOForProj_Result> sp_getPIOForProj(Nullable<long> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPIOForProj_Result>("sp_getPIOForProj", pIDParameter);
        }
    
        public virtual ObjectResult<sp_getPipeAbandonmentInsp_rpt_Result> sp_getPipeAbandonmentInsp_rpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPipeAbandonmentInsp_rpt_Result>("sp_getPipeAbandonmentInsp_rpt", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getPIPEInspWorkflow_Result> sp_getPIPEInspWorkflow(Nullable<long> projId, Nullable<long> currAssetID)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPIPEInspWorkflow_Result>("sp_getPIPEInspWorkflow", projIdParameter, currAssetIDParameter);
        }
    
        public virtual ObjectResult<sp_getPlanOverviewDetails_Result> sp_getPlanOverviewDetails(Nullable<long> projectId, Nullable<long> planSubmittalId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var planSubmittalIdParameter = planSubmittalId.HasValue ?
                new ObjectParameter("PlanSubmittalId", planSubmittalId) :
                new ObjectParameter("PlanSubmittalId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPlanOverviewDetails_Result>("sp_getPlanOverviewDetails", projectIdParameter, planSubmittalIdParameter);
        }
    
        public virtual ObjectResult<sp_getPotentialOOOInspAssets_Result> sp_getPotentialOOOInspAssets(Nullable<long> projID, Nullable<long> wFNUM, Nullable<long> assetTypeID, Nullable<long> inspTypeID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var wFNUMParameter = wFNUM.HasValue ?
                new ObjectParameter("WFNUM", wFNUM) :
                new ObjectParameter("WFNUM", typeof(long));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("InspTypeID", inspTypeID) :
                new ObjectParameter("InspTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPotentialOOOInspAssets_Result>("sp_getPotentialOOOInspAssets", projIDParameter, wFNUMParameter, assetTypeIDParameter, inspTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_getPotentialOOOInsps_Result> sp_getPotentialOOOInsps(Nullable<long> projID, Nullable<long> wFNUM, Nullable<long> assetTypeID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var wFNUMParameter = wFNUM.HasValue ?
                new ObjectParameter("WFNUM", wFNUM) :
                new ObjectParameter("WFNUM", typeof(long));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPotentialOOOInsps_Result>("sp_getPotentialOOOInsps", projIDParameter, wFNUMParameter, assetTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_getPotentialPIAs_Result> sp_getPotentialPIAs(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPotentialPIAs_Result>("sp_getPotentialPIAs", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjAssetOOOInspAvail_Result> sp_getProjAssetOOOInspAvail(Nullable<long> projId, Nullable<long> pIAID, Nullable<long> iWFNUM, Nullable<long> pIATID, Nullable<bool> mAI)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            var pIAIDParameter = pIAID.HasValue ?
                new ObjectParameter("PIAID", pIAID) :
                new ObjectParameter("PIAID", typeof(long));
    
            var iWFNUMParameter = iWFNUM.HasValue ?
                new ObjectParameter("IWFNUM", iWFNUM) :
                new ObjectParameter("IWFNUM", typeof(long));
    
            var pIATIDParameter = pIATID.HasValue ?
                new ObjectParameter("PIATID", pIATID) :
                new ObjectParameter("PIATID", typeof(long));
    
            var mAIParameter = mAI.HasValue ?
                new ObjectParameter("MAI", mAI) :
                new ObjectParameter("MAI", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjAssetOOOInspAvail_Result>("sp_getProjAssetOOOInspAvail", projIdParameter, pIAIDParameter, iWFNUMParameter, pIATIDParameter, mAIParameter);
        }
    
        public virtual ObjectResult<sp_getProjCertsOfOcc_Result> sp_getProjCertsOfOcc(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("projID", projID) :
                new ObjectParameter("projID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjCertsOfOcc_Result>("sp_getProjCertsOfOcc", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectApprovedPlans_Result> sp_getProjectApprovedPlans(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectApprovedPlans_Result>("sp_getProjectApprovedPlans", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectAttachments_Result> sp_getProjectAttachments(Nullable<long> projID, Nullable<long> ownerTypeID, Nullable<long> recordID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var ownerTypeIDParameter = ownerTypeID.HasValue ?
                new ObjectParameter("OwnerTypeID", ownerTypeID) :
                new ObjectParameter("OwnerTypeID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectAttachments_Result>("sp_getProjectAttachments", projIDParameter, ownerTypeIDParameter, recordIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectContacts_Result> sp_getProjectContacts(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectContacts_Result>("sp_getProjectContacts", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectInspectionsOverview_Result> sp_getProjectInspectionsOverview(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectInspectionsOverview_Result>("sp_getProjectInspectionsOverview", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectPlanRevisions_Result> sp_getProjectPlanRevisions(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectPlanRevisions_Result>("sp_getProjectPlanRevisions", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectPlansChainOfCustody_Result> sp_getProjectPlansChainOfCustody(Nullable<long> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectPlansChainOfCustody_Result>("sp_getProjectPlansChainOfCustody", projectIdParameter);
        }
    
        public virtual ObjectResult<sp_getProjectPlanSubmittals_Result> sp_getProjectPlanSubmittals(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectPlanSubmittals_Result>("sp_getProjectPlanSubmittals", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectsBySearch_Result> sp_getProjectsBySearch(Nullable<long> inspectionTypeID, Nullable<long> projClass, string manholeName, string reviewerID, Nullable<bool> iLA, Nullable<bool> overSize, Nullable<bool> refunds, Nullable<bool> includeInactive)
        {
            var inspectionTypeIDParameter = inspectionTypeID.HasValue ?
                new ObjectParameter("InspectionTypeID", inspectionTypeID) :
                new ObjectParameter("InspectionTypeID", typeof(long));
    
            var projClassParameter = projClass.HasValue ?
                new ObjectParameter("ProjClass", projClass) :
                new ObjectParameter("ProjClass", typeof(long));
    
            var manholeNameParameter = manholeName != null ?
                new ObjectParameter("ManholeName", manholeName) :
                new ObjectParameter("ManholeName", typeof(string));
    
            var reviewerIDParameter = reviewerID != null ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(string));
    
            var iLAParameter = iLA.HasValue ?
                new ObjectParameter("ILA", iLA) :
                new ObjectParameter("ILA", typeof(bool));
    
            var overSizeParameter = overSize.HasValue ?
                new ObjectParameter("OverSize", overSize) :
                new ObjectParameter("OverSize", typeof(bool));
    
            var refundsParameter = refunds.HasValue ?
                new ObjectParameter("Refunds", refunds) :
                new ObjectParameter("Refunds", typeof(bool));
    
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("IncludeInactive", includeInactive) :
                new ObjectParameter("IncludeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectsBySearch_Result>("sp_getProjectsBySearch", inspectionTypeIDParameter, projClassParameter, manholeNameParameter, reviewerIDParameter, iLAParameter, overSizeParameter, refundsParameter, includeInactiveParameter);
        }
    
        public virtual int sp_getProjectSearchInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getProjectSearchInfo");
        }
    
        public virtual ObjectResult<sp_getProjectsForInspector_Result> sp_getProjectsForInspector(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> inspectorID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectsForInspector_Result>("sp_getProjectsForInspector", startDateParameter, endDateParameter, inspectorIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjectsWithContacts_Result> sp_getProjectsWithContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjectsWithContacts_Result>("sp_getProjectsWithContacts");
        }
    
        public virtual ObjectResult<sp_getProjExternalInspActivity_Result> sp_getProjExternalInspActivity(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjExternalInspActivity_Result>("sp_getProjExternalInspActivity", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjExternalInspActivityByITID_Result> sp_getProjExternalInspActivityByITID(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> iTID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var iTIDParameter = iTID.HasValue ?
                new ObjectParameter("ITID", iTID) :
                new ObjectParameter("ITID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjExternalInspActivityByITID_Result>("sp_getProjExternalInspActivityByITID", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter, iTIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjHoldComments_Result> sp_getProjHoldComments(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjHoldComments_Result>("sp_getProjHoldComments", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspActivity_Result> sp_getProjInspActivity(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspActivity_Result>("sp_getProjInspActivity", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspAssets_Result> sp_getProjInspAssets(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspAssets_Result>("sp_getProjInspAssets", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspByDate_Result> sp_getProjInspByDate(Nullable<long> projID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspByDate_Result>("sp_getProjInspByDate", projIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspByStatus_Result> sp_getProjInspByStatus(Nullable<long> inspStatus)
        {
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspByStatus_Result>("sp_getProjInspByStatus", inspStatusParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspByType_Result> sp_getProjInspByType(Nullable<long> projID, Nullable<long> inspTypeID, Nullable<long> inspStatus, Nullable<long> inspDisp)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("InspTypeID", inspTypeID) :
                new ObjectParameter("InspTypeID", typeof(long));
    
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            var inspDispParameter = inspDisp.HasValue ?
                new ObjectParameter("InspDisp", inspDisp) :
                new ObjectParameter("InspDisp", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspByType_Result>("sp_getProjInspByType", projIDParameter, inspTypeIDParameter, inspStatusParameter, inspDispParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspByTypeAndDisp_Result> sp_getProjInspByTypeAndDisp(Nullable<long> projID, Nullable<long> inspType, Nullable<long> inspDisp)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspTypeParameter = inspType.HasValue ?
                new ObjectParameter("InspType", inspType) :
                new ObjectParameter("InspType", typeof(long));
    
            var inspDispParameter = inspDisp.HasValue ?
                new ObjectParameter("InspDisp", inspDisp) :
                new ObjectParameter("InspDisp", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspByTypeAndDisp_Result>("sp_getProjInspByTypeAndDisp", projIDParameter, inspTypeParameter, inspDispParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspComments_Result> sp_getProjInspComments(Nullable<long> projID, Nullable<long> ownerTypeID, Nullable<long> commentTypeID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var ownerTypeIDParameter = ownerTypeID.HasValue ?
                new ObjectParameter("OwnerTypeID", ownerTypeID) :
                new ObjectParameter("OwnerTypeID", typeof(long));
    
            var commentTypeIDParameter = commentTypeID.HasValue ?
                new ObjectParameter("CommentTypeID", commentTypeID) :
                new ObjectParameter("CommentTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspComments_Result>("sp_getProjInspComments", projIDParameter, ownerTypeIDParameter, commentTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspDetails_Result> sp_getProjInspDetails(Nullable<long> inspId)
        {
            var inspIdParameter = inspId.HasValue ?
                new ObjectParameter("InspId", inspId) :
                new ObjectParameter("InspId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspDetails_Result>("sp_getProjInspDetails", inspIdParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspDiscrepancies_Result> sp_getProjInspDiscrepancies(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspDiscrepancies_Result>("sp_getProjInspDiscrepancies", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspections_Result> sp_getProjInspections(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspections_Result>("sp_getProjInspections", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspForInspector_Result> sp_getProjInspForInspector(Nullable<long> inspectorID, Nullable<long> projID, Nullable<long> inspStatus, Nullable<long> inspDisp, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            var inspDispParameter = inspDisp.HasValue ?
                new ObjectParameter("InspDisp", inspDisp) :
                new ObjectParameter("InspDisp", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspForInspector_Result>("sp_getProjInspForInspector", inspectorIDParameter, projIDParameter, inspStatusParameter, inspDispParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspForInspector2_Result> sp_getProjInspForInspector2(Nullable<long> inspectorID, Nullable<long> projID, Nullable<long> inspStatus, Nullable<long> inspDisp, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var inspectorIDParameter = inspectorID.HasValue ?
                new ObjectParameter("InspectorID", inspectorID) :
                new ObjectParameter("InspectorID", typeof(long));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            var inspDispParameter = inspDisp.HasValue ?
                new ObjectParameter("InspDisp", inspDisp) :
                new ObjectParameter("InspDisp", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspForInspector2_Result>("sp_getProjInspForInspector2", inspectorIDParameter, projIDParameter, inspStatusParameter, inspDispParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspListByAssetType_Result> sp_getProjInspListByAssetType(Nullable<long> projID, Nullable<long> iWNUM, Nullable<long> eA_SETTING)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var eA_SETTINGParameter = eA_SETTING.HasValue ?
                new ObjectParameter("EA_SETTING", eA_SETTING) :
                new ObjectParameter("EA_SETTING", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspListByAssetType_Result>("sp_getProjInspListByAssetType", projIDParameter, iWNUMParameter, eA_SETTINGParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspReqComments_Result> sp_getProjInspReqComments(Nullable<long> reqID)
        {
            var reqIDParameter = reqID.HasValue ?
                new ObjectParameter("ReqID", reqID) :
                new ObjectParameter("ReqID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspReqComments_Result>("sp_getProjInspReqComments", reqIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspReqDetails_Result> sp_getProjInspReqDetails(Nullable<long> reqID)
        {
            var reqIDParameter = reqID.HasValue ?
                new ObjectParameter("ReqID", reqID) :
                new ObjectParameter("ReqID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspReqDetails_Result>("sp_getProjInspReqDetails", reqIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspReqInspections_Result> sp_getProjInspReqInspections(Nullable<long> inspReqID)
        {
            var inspReqIDParameter = inspReqID.HasValue ?
                new ObjectParameter("InspReqID", inspReqID) :
                new ObjectParameter("InspReqID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspReqInspections_Result>("sp_getProjInspReqInspections", inspReqIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspReqs_Result> sp_getProjInspReqs(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspReqs_Result>("sp_getProjInspReqs", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspReqsByStatus_Result> sp_getProjInspReqsByStatus(Nullable<long> inspStatus)
        {
            var inspStatusParameter = inspStatus.HasValue ?
                new ObjectParameter("InspStatus", inspStatus) :
                new ObjectParameter("InspStatus", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspReqsByStatus_Result>("sp_getProjInspReqsByStatus", inspStatusParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspsBasedOnDiscrepancy_Result> sp_getProjInspsBasedOnDiscrepancy(Nullable<long> projID, Nullable<long> inspTypeID, Nullable<long> commentID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("InspTypeID", inspTypeID) :
                new ObjectParameter("InspTypeID", typeof(long));
    
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspsBasedOnDiscrepancy_Result>("sp_getProjInspsBasedOnDiscrepancy", projIDParameter, inspTypeIDParameter, commentIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspToRequest_Result> sp_getProjInspToRequest(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspToRequest_Result>("sp_getProjInspToRequest", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspWorkflow_Result> sp_getProjInspWorkflow(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspWorkflow_Result>("sp_getProjInspWorkflow", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspWorkflowHoldPoints_Result> sp_getProjInspWorkflowHoldPoints(Nullable<long> projID, Nullable<long> inspTypeID, Nullable<long> assetTypeID, Nullable<long> assetID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("inspTypeID", inspTypeID) :
                new ObjectParameter("inspTypeID", typeof(long));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("assetTypeID", assetTypeID) :
                new ObjectParameter("assetTypeID", typeof(long));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("assetID", assetID) :
                new ObjectParameter("assetID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspWorkflowHoldPoints_Result>("sp_getProjInspWorkflowHoldPoints", projIDParameter, inspTypeIDParameter, assetTypeIDParameter, assetIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjInspWorkflowHoldPoints_WIP_Result> sp_getProjInspWorkflowHoldPoints_WIP(Nullable<long> projID, Nullable<long> inspTypeID, Nullable<long> assetTypeID, Nullable<long> assetID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var inspTypeIDParameter = inspTypeID.HasValue ?
                new ObjectParameter("inspTypeID", inspTypeID) :
                new ObjectParameter("inspTypeID", typeof(long));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("assetTypeID", assetTypeID) :
                new ObjectParameter("assetTypeID", typeof(long));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("assetID", assetID) :
                new ObjectParameter("assetID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjInspWorkflowHoldPoints_WIP_Result>("sp_getProjInspWorkflowHoldPoints_WIP", projIDParameter, inspTypeIDParameter, assetTypeIDParameter, assetIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjLastPlanReviewSubmittalDetails_Result> sp_getProjLastPlanReviewSubmittalDetails(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjLastPlanReviewSubmittalDetails_Result>("sp_getProjLastPlanReviewSubmittalDetails", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjMHInspActivity_Result> sp_getProjMHInspActivity(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjMHInspActivity_Result>("sp_getProjMHInspActivity", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjMHInspActivityByITID_Result> sp_getProjMHInspActivityByITID(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> iTID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var iTIDParameter = iTID.HasValue ?
                new ObjectParameter("ITID", iTID) :
                new ObjectParameter("ITID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjMHInspActivityByITID_Result>("sp_getProjMHInspActivityByITID", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter, iTIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjMHsAndPOCsForPIOCreation_Result> sp_getProjMHsAndPOCsForPIOCreation(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjMHsAndPOCsForPIOCreation_Result>("sp_getProjMHsAndPOCsForPIOCreation", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjMHsFromGIS_Result> sp_getProjMHsFromGIS(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjMHsFromGIS_Result>("sp_getProjMHsFromGIS", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjMHsFromPIA_Result> sp_getProjMHsFromPIA(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjMHsFromPIA_Result>("sp_getProjMHsFromPIA", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjOOOInspections_Result> sp_getProjOOOInspections(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjOOOInspections_Result>("sp_getProjOOOInspections", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjPIPEInspActivity_Result> sp_getProjPIPEInspActivity(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjPIPEInspActivity_Result>("sp_getProjPIPEInspActivity", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getProjPIPEInspActivityByITID_Result> sp_getProjPIPEInspActivityByITID(Nullable<long> projID, Nullable<long> iWNUM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> iTID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var iWNUMParameter = iWNUM.HasValue ?
                new ObjectParameter("IWNUM", iWNUM) :
                new ObjectParameter("IWNUM", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var iTIDParameter = iTID.HasValue ?
                new ObjectParameter("ITID", iTID) :
                new ObjectParameter("ITID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjPIPEInspActivityByITID_Result>("sp_getProjPIPEInspActivityByITID", projIDParameter, iWNUMParameter, startDateParameter, endDateParameter, iTIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjPIPEsFromGIS_Result> sp_getProjPIPEsFromGIS(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjPIPEsFromGIS_Result>("sp_getProjPIPEsFromGIS", projIDParameter);
        }
    
        public virtual ObjectResult<sp_getProjPIPEsFromPIA_Result> sp_getProjPIPEsFromPIA(Nullable<long> projID, Nullable<bool> isGIS)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var isGISParameter = isGIS.HasValue ?
                new ObjectParameter("isGIS", isGIS) :
                new ObjectParameter("isGIS", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjPIPEsFromPIA_Result>("sp_getProjPIPEsFromPIA", projIDParameter, isGISParameter);
        }
    
        public virtual ObjectResult<sp_getProjUniqueInspections_Result> sp_getProjUniqueInspections(Nullable<long> pID, Nullable<long> iWFNUM)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            var iWFNUMParameter = iWFNUM.HasValue ?
                new ObjectParameter("IWFNUM", iWFNUM) :
                new ObjectParameter("IWFNUM", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProjUniqueInspections_Result>("sp_getProjUniqueInspections", pIDParameter, iWFNUMParameter);
        }
    
        public virtual int sp_GetPRSAND_MANHOLES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPRSAND_MANHOLES");
        }
    
        public virtual ObjectResult<sp_GetReviewDetailsForMonth_Result> sp_GetReviewDetailsForMonth(string userName, Nullable<int> mo, Nullable<int> prs)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var moParameter = mo.HasValue ?
                new ObjectParameter("Mo", mo) :
                new ObjectParameter("Mo", typeof(int));
    
            var prsParameter = prs.HasValue ?
                new ObjectParameter("prs", prs) :
                new ObjectParameter("prs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReviewDetailsForMonth_Result>("sp_GetReviewDetailsForMonth", userNameParameter, moParameter, prsParameter);
        }
    
        public virtual ObjectResult<sp_getReviewersByDate_Result> sp_getReviewersByDate(string startDateString, string endDateString, string userName)
        {
            var startDateStringParameter = startDateString != null ?
                new ObjectParameter("startDateString", startDateString) :
                new ObjectParameter("startDateString", typeof(string));
    
            var endDateStringParameter = endDateString != null ?
                new ObjectParameter("endDateString", endDateString) :
                new ObjectParameter("endDateString", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getReviewersByDate_Result>("sp_getReviewersByDate", startDateStringParameter, endDateStringParameter, userNameParameter);
        }
    
        public virtual ObjectResult<sp_GetReviewsByEngMonthly_rptp_Result> sp_GetReviewsByEngMonthly_rptp(Nullable<int> mo)
        {
            var moParameter = mo.HasValue ?
                new ObjectParameter("Mo", mo) :
                new ObjectParameter("Mo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReviewsByEngMonthly_rptp_Result>("sp_GetReviewsByEngMonthly_rptp", moParameter);
        }
    
        public virtual ObjectResult<sp_getRoleFormRights_Result> sp_getRoleFormRights(Nullable<long> rOLEID)
        {
            var rOLEIDParameter = rOLEID.HasValue ?
                new ObjectParameter("ROLEID", rOLEID) :
                new ObjectParameter("ROLEID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getRoleFormRights_Result>("sp_getRoleFormRights", rOLEIDParameter);
        }
    
        public virtual ObjectResult<sp_getSegments_Result> sp_getSegments(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getSegments_Result>("sp_getSegments", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getSegmentsForLD_Result> sp_getSegmentsForLD(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getSegmentsForLD_Result>("sp_getSegmentsForLD", projIdParameter);
        }
    
        public virtual ObjectResult<sp_getTotalMetrics_rptp_Result> sp_getTotalMetrics_rptp(Nullable<System.DateTime> beg_dt, Nullable<System.DateTime> end_dt)
        {
            var beg_dtParameter = beg_dt.HasValue ?
                new ObjectParameter("Beg_dt", beg_dt) :
                new ObjectParameter("Beg_dt", typeof(System.DateTime));
    
            var end_dtParameter = end_dt.HasValue ?
                new ObjectParameter("End_dt", end_dt) :
                new ObjectParameter("End_dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getTotalMetrics_rptp_Result>("sp_getTotalMetrics_rptp", beg_dtParameter, end_dtParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_InspectionMetricsRpt_Result> sp_InspectionMetricsRpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InspectionMetricsRpt_Result>("sp_InspectionMetricsRpt", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_InspectionMetricsRptTotals_Result> sp_InspectionMetricsRptTotals(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InspectionMetricsRptTotals_Result>("sp_InspectionMetricsRptTotals", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_LastSubmittalDetails_Result> sp_LastSubmittalDetails(Nullable<long> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LastSubmittalDetails_Result>("sp_LastSubmittalDetails", projIDParameter);
        }
    
        public virtual int sp_LINK_SYNC_POCREQUEST(Nullable<long> pOCREQUESTID)
        {
            var pOCREQUESTIDParameter = pOCREQUESTID.HasValue ?
                new ObjectParameter("POCREQUESTID", pOCREQUESTID) :
                new ObjectParameter("POCREQUESTID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LINK_SYNC_POCREQUEST", pOCREQUESTIDParameter);
        }
    
        public virtual ObjectResult<sp_ManagerInspections_rpt_Result> sp_ManagerInspections_rpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ManagerInspections_rpt_Result>("sp_ManagerInspections_rpt", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_NextProjInspToReqDisplay_Result> sp_NextProjInspToReqDisplay(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NextProjInspToReqDisplay_Result>("sp_NextProjInspToReqDisplay", projIdParameter);
        }
    
        public virtual ObjectResult<sp_NextProjInspToReqDisplay_V1_Result> sp_NextProjInspToReqDisplay_V1(Nullable<long> projid, Nullable<long> currInspTypeID)
        {
            var projidParameter = projid.HasValue ?
                new ObjectParameter("projid", projid) :
                new ObjectParameter("projid", typeof(long));
    
            var currInspTypeIDParameter = currInspTypeID.HasValue ?
                new ObjectParameter("currInspTypeID", currInspTypeID) :
                new ObjectParameter("currInspTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NextProjInspToReqDisplay_V1_Result>("sp_NextProjInspToReqDisplay_V1", projidParameter, currInspTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_PeekAtNextProjInspToReqBasedOnMH_Result> sp_PeekAtNextProjInspToReqBasedOnMH(Nullable<long> projID, Nullable<long> currInspTypeID, Nullable<long> currAssetID, Nullable<long> currAssetTypeID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(long));
    
            var currInspTypeIDParameter = currInspTypeID.HasValue ?
                new ObjectParameter("currInspTypeID", currInspTypeID) :
                new ObjectParameter("currInspTypeID", typeof(long));
    
            var currAssetIDParameter = currAssetID.HasValue ?
                new ObjectParameter("currAssetID", currAssetID) :
                new ObjectParameter("currAssetID", typeof(long));
    
            var currAssetTypeIDParameter = currAssetTypeID.HasValue ?
                new ObjectParameter("currAssetTypeID", currAssetTypeID) :
                new ObjectParameter("currAssetTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PeekAtNextProjInspToReqBasedOnMH_Result>("sp_PeekAtNextProjInspToReqBasedOnMH", projIDParameter, currInspTypeIDParameter, currAssetIDParameter, currAssetTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_PendingPlanReviews_Result> sp_PendingPlanReviews()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PendingPlanReviews_Result>("sp_PendingPlanReviews");
        }
    
        public virtual ObjectResult<sp_PlanReviewActivity_rptp_Result> sp_PlanReviewActivity_rptp(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlanReviewActivity_rptp_Result>("sp_PlanReviewActivity_rptp", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual ObjectResult<sp_PlanReviewActivity_rptp_ORIG_Result> sp_PlanReviewActivity_rptp_ORIG(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlanReviewActivity_rptp_ORIG_Result>("sp_PlanReviewActivity_rptp_ORIG", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual ObjectResult<sp_PlanReviewTimeReportFirst_Result> sp_PlanReviewTimeReportFirst(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlanReviewTimeReportFirst_Result>("sp_PlanReviewTimeReportFirst", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual ObjectResult<sp_PlanReviewTimeReportMylar_Result> sp_PlanReviewTimeReportMylar(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlanReviewTimeReportMylar_Result>("sp_PlanReviewTimeReportMylar", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual ObjectResult<sp_PlanReviewTimeReportRevision_Result> sp_PlanReviewTimeReportRevision(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlanReviewTimeReportRevision_Result>("sp_PlanReviewTimeReportRevision", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual ObjectResult<sp_PlanReviewTimeReportSubsequent_Result> sp_PlanReviewTimeReportSubsequent(Nullable<System.DateTime> pBeg_Dt, Nullable<System.DateTime> pEnd_Dt)
        {
            var pBeg_DtParameter = pBeg_Dt.HasValue ?
                new ObjectParameter("PBeg_Dt", pBeg_Dt) :
                new ObjectParameter("PBeg_Dt", typeof(System.DateTime));
    
            var pEnd_DtParameter = pEnd_Dt.HasValue ?
                new ObjectParameter("PEnd_Dt", pEnd_Dt) :
                new ObjectParameter("PEnd_Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlanReviewTimeReportSubsequent_Result>("sp_PlanReviewTimeReportSubsequent", pBeg_DtParameter, pEnd_DtParameter);
        }
    
        public virtual int sp_ProjectBDStatus_rpt(Nullable<System.DateTime> metricStartDate)
        {
            var metricStartDateParameter = metricStartDate.HasValue ?
                new ObjectParameter("MetricStartDate", metricStartDate) :
                new ObjectParameter("MetricStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProjectBDStatus_rpt", metricStartDateParameter);
        }
    
        public virtual int sp_ProjectBDTStatus_rpt(Nullable<System.DateTime> metricStartDate)
        {
            var metricStartDateParameter = metricStartDate.HasValue ?
                new ObjectParameter("MetricStartDate", metricStartDate) :
                new ObjectParameter("MetricStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProjectBDTStatus_rpt", metricStartDateParameter);
        }
    
        public virtual int sp_ProjectStatus_rpt(Nullable<System.DateTime> metricStartDate)
        {
            var metricStartDateParameter = metricStartDate.HasValue ?
                new ObjectParameter("MetricStartDate", metricStartDate) :
                new ObjectParameter("MetricStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProjectStatus_rpt", metricStartDateParameter);
        }
    
        public virtual int sp_ProjInspsAtAGlance(Nullable<long> pID, Nullable<long> iWFNUM)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            var iWFNUMParameter = iWFNUM.HasValue ?
                new ObjectParameter("IWFNUM", iWFNUM) :
                new ObjectParameter("IWFNUM", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProjInspsAtAGlance", pIDParameter, iWFNUMParameter);
        }
    
        public virtual ObjectResult<sp_ProjMHInspActivitySpreadsheet_Result> sp_ProjMHInspActivitySpreadsheet(Nullable<long> pID, Nullable<long> iWFNUM)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            var iWFNUMParameter = iWFNUM.HasValue ?
                new ObjectParameter("IWFNUM", iWFNUM) :
                new ObjectParameter("IWFNUM", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProjMHInspActivitySpreadsheet_Result>("sp_ProjMHInspActivitySpreadsheet", pIDParameter, iWFNUMParameter);
        }
    
        public virtual ObjectResult<sp_ProjPIPEInspActivitySpreadsheet_Result> sp_ProjPIPEInspActivitySpreadsheet(Nullable<long> pID, Nullable<long> iWFNUM)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            var iWFNUMParameter = iWFNUM.HasValue ?
                new ObjectParameter("IWFNUM", iWFNUM) :
                new ObjectParameter("IWFNUM", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProjPIPEInspActivitySpreadsheet_Result>("sp_ProjPIPEInspActivitySpreadsheet", pIDParameter, iWFNUMParameter);
        }
    
        public virtual int sp_RemovePlanSubmittal(Nullable<long> psid, string update_by)
        {
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var update_byParameter = update_by != null ?
                new ObjectParameter("update_by", update_by) :
                new ObjectParameter("update_by", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RemovePlanSubmittal", psidParameter, update_byParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_ReturnInactiveMH_Result> sp_ReturnInactiveMH(Nullable<long> projid)
        {
            var projidParameter = projid.HasValue ?
                new ObjectParameter("projid", projid) :
                new ObjectParameter("projid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReturnInactiveMH_Result>("sp_ReturnInactiveMH", projidParameter);
        }
    
        public virtual ObjectResult<sp_TotalInspections_rpt_Result> sp_TotalInspections_rpt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string inspector, string inspectionType, string projnum, Nullable<int> disposition, string developerName, string contractorName, string projName)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inspectorParameter = inspector != null ?
                new ObjectParameter("inspector", inspector) :
                new ObjectParameter("inspector", typeof(string));
    
            var inspectionTypeParameter = inspectionType != null ?
                new ObjectParameter("inspectionType", inspectionType) :
                new ObjectParameter("inspectionType", typeof(string));
    
            var projnumParameter = projnum != null ?
                new ObjectParameter("projnum", projnum) :
                new ObjectParameter("projnum", typeof(string));
    
            var dispositionParameter = disposition.HasValue ?
                new ObjectParameter("disposition", disposition) :
                new ObjectParameter("disposition", typeof(int));
    
            var developerNameParameter = developerName != null ?
                new ObjectParameter("DeveloperName", developerName) :
                new ObjectParameter("DeveloperName", typeof(string));
    
            var contractorNameParameter = contractorName != null ?
                new ObjectParameter("ContractorName", contractorName) :
                new ObjectParameter("ContractorName", typeof(string));
    
            var projNameParameter = projName != null ?
                new ObjectParameter("projName", projName) :
                new ObjectParameter("projName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TotalInspections_rpt_Result>("sp_TotalInspections_rpt", startDateParameter, endDateParameter, inspectorParameter, inspectionTypeParameter, projnumParameter, dispositionParameter, developerNameParameter, contractorNameParameter, projNameParameter);
        }
    
        public virtual ObjectResult<sp_TotalInspections_rpt_GTBackup_Result> sp_TotalInspections_rpt_GTBackup(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TotalInspections_rpt_GTBackup_Result>("sp_TotalInspections_rpt_GTBackup", startDateParameter, endDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spEXECsp_RECOMPILE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEXECsp_RECOMPILE");
        }
    
        public virtual ObjectResult<spForPortal_GetAllCompanies_Result> spForPortal_GetAllCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spForPortal_GetAllCompanies_Result>("spForPortal_GetAllCompanies");
        }
    
        public virtual ObjectResult<spForPortal_GetMyPOCs_Result> spForPortal_GetMyPOCs(Nullable<long> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spForPortal_GetMyPOCs_Result>("spForPortal_GetMyPOCs", cIDParameter);
        }
    
        public virtual ObjectResult<spForPortal_GetMyProjects_Result> spForPortal_GetMyProjects(Nullable<long> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spForPortal_GetMyProjects_Result>("spForPortal_GetMyProjects", pIDParameter);
        }
    
        public virtual ObjectResult<spForPortal_GetMyProjectsByContact_Result> spForPortal_GetMyProjectsByContact(Nullable<long> cID, Nullable<long> pID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(long));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spForPortal_GetMyProjectsByContact_Result>("spForPortal_GetMyProjectsByContact", cIDParameter, pIDParameter);
        }
    
        public virtual ObjectResult<spForPortal_GetProjectPlans_Result> spForPortal_GetProjectPlans(Nullable<long> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spForPortal_GetProjectPlans_Result>("spForPortal_GetProjectPlans", pIDParameter);
        }
    
        public virtual ObjectResult<spGetAllPOCRequests_Result> spGetAllPOCRequests(Nullable<long> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPOCRequests_Result>("spGetAllPOCRequests", cIDParameter);
        }
    }
}
